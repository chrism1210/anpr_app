
Approval:This document is part of the document set for the BOF Product and hence is approved here by Northgate for distribution.  Any customer specific approvals are captured on specific document approval sheets.NameSignatureDateDave WalterANPR Product ManagerDocument controlChange control table:VersionDescriptionRelease dateReason for change0.11st draft17th March 2009Initial draft1.0Issued1st March 2010Refined and issued prior to Soak Testing1.1Issued for review15th April 2010Minor updates and issued for NPIA review1.2Add review comments14th June 2010Updates from NPIA review1.3Update and clarify web service handling26th July 2010Updates from NPIA review1.4Include 2.2 document as an appendix10th August 2010Updates from NPIA review1.5Tidy up 1st February 2011Document tidy up & consistency changes1.6Tidy up 21st February 2011Apply new common table formatPrepared by:NameContact detailsCarl Bevincarl.bevin@northgate-is.comRichard Espleyrichard.espley@northgate-is.com
Table of Contents1	Introduction	71.1	Purpose	71.2	Background	71.3	Using this Document	71.4	Main Document Section	92	Overview	102.1	Setup of “External Systems”	102.2	Web Service Platforms	102.3	Security	102.4	Accessing the WSDL for BOF2 web services	103	Web Service Categorisation	113.1	Web Service Functional Groups	114	Web Services Definitions	134.1	Conventions Used	134.1.1	Tables	134.1.2	Method Stubs	134.1.3	Return Types	134.2	Date & Time Values	135	Throttling	146	Functional Area: Call-on-Hit	156.1	CallOnHitWebService	156.1.1	WsRequestImages	157	Functional Area: File Operations	167.1	ImportableFileNamesService	167.1.1	getImportableFileNames	167.2	UpdateFilesService	167.2.1	getFileDatablock	167.2.2	getFileStatusAsString	177.2.3	getFileStatus	177.2.4	getRepoStatus	187.2.5	getFileSHA1Hashsum	188	Functional Area: Hotlists	208.1	RemotelyInstalledHotlistWebService	208.1.1	ListAllHotlists	208.1.2	GetHotlistsToRemove	208.2	UpdateHotlistsService	218.2.1	getHotlistRepoStatus	218.2.2	getHotlistStatus	218.2.3	setHotlistStatus	228.2.4	getHotlistUpdatesRestrictSize	238.2.5	getMultipleHotlistUpdatesRestrictSize	258.2.6	getHotlistUpdates	258.2.7	getMultipleHotlistUpdates	269	Functional Area: Input	279.1	InputBinaryDataWebService	279.1.1	addBinaryCaptureData	279.2	InputCaptureWebService	279.2.1	SendCapture	279.2.2	SendCompactCapture	299.2.3	SendCompoundCapture	3010	Functional Area: Mobile User	3210.1	MobileUsersWebService	3210.1.1	UpdateMobilePassword	3210.1.2	GetMobileUsersList	3210.1.3	UpdateCapture	3211	Functional Area: PNC	3411.1	PingPNCWebService	3411.1.1	PingPNC	3411.1.2	ManualCheck	3411.1.3	FastTrackResponse	3512	Release 2.2 to 2.3 Cross Reference	3713	Support for SSL	3913.1	Web Server	3913.2	Certificates	3913.3	Which Web Services ?	3914	Error Handling	4015	WSDL Definitions	4415.1	UpdateFilesService	4415.2	ImportableFileNamesService	4615.3	UpdateHotlistsService	4915.4	RemotelyInstalledHotlistWebService	5315.5	InputCaputureWebService	5415.6	InputBinaryDataWebService	5615.7	MobileUsersWebService	5815.8	PNCWebService	6015.9	CallOnHitWebService	6216	Appendix – Version 2.2	6417	Appendix - Web Services for 2.2	6517.1	Overview of Operation	6517.2	Data Flows	6518	Appendix - Web Service Overview and Platformfor 2.2	6718.1	Overview	6718.2	Web Service Platform	6718.3	Security	6718.4	Multi-server architecture	6819	Appendix - Web Service Definitions for 2.2	6920	Appendix - Functional Area: File Operations	7021	Appendix - Functional Area: Input	7422	Appendix - Functional Area: Hotlists	7923	Appendix - Functional Area: Mobile User	8824	Appendix - Functional Area: PNC	9125	Appendix - Functional Area: Miscellaneous	9326.	Appendix - Interface Error Handling 2.2	9727.	Appendix - Throttling 2.2	10028.	Appendix - WSDL Definitions 2.2	10128.2	InputCaptureWebService	10228.3	InputBinaryCaptureDataWebService	10428.4	InputCompactCaptureWebService	10628.5	InputCompoundCaptureWebService	10728.6	GetHotlistRepoStatusService	10928.7	GetHotlistStatusService	11028.8	SetHotlistStatusService	11228.9	GetHotlistUpdatesRestrictSizeService	11428.10	PNCManualCheckWebService	11628.11	CreateHotlistWebService	11828.12	DeleteHotlistWebService	12028.13	AlertWebService	12128.14	QuickCheckWebService	12228.15	SearchWebService	12428.16	GetCaptureImageWebService	12628.17	PNCStatusWebService	12828.18	PNCFastTrackResponsesWebService	12928.19	PingWebService	13128.20	MobileUsersWebService	13228.21	UpdateFilesService	13428.22	RemotelyInstalledHotlistWebService	138
GlossaryANPRAutomatic Number Plate RecognitionBOFAbbreviation of “Back Office Facility”. BOF is Northgate’s Automatic Number Plate Recognition management and reporting system.CJXCriminal Justice Extranet (also known as PNN2)IP addressAbbreviation of “Internet Protocol Address”. IP addresses are used by BOFDR to uniquely identify and communicate with the servers being monitored.ISS4PSInformation Systems Strategy for the Police ServiceJAX-RPCJava API for XML based RPC (Remote Procedure Call)JAX-WSJava API for XML Web ServicesNRDNumber plate Reading DevicePNCPolice National ComputerPNNPolice National NetworkSOAPSimple Object Access Protocol – XML based specification for exchanging information over Web ServicesVRMVehicle Registration MarkXMLExtensible Mark-up Language – general purpose specification for mark-up languagesWS-IWeb Services Interoperability OrganisationWSDLWeb Service Definition Language1 Introduction1.1 PurposeThe purpose of this document is to describe the web services published by BOF2.3.  This description also includes the legacy web services maintained from the BOF2.2 product.1.2 BackgroundBOF 2.3 is the fourth version of Northgate’s second generation BOF, known generically as BOF 2. This document set relates only to BOF 2.3, and may not be consistent with previous or future versions.BOF 2 has been designed to use web services to connect ANPR and non-ANPR systems, such as force intelligence systems (FIS) and Geographical Information Systems (GIS). Prior to the implementation of web services within the BOF, Scarab represented the principal interface between the BOF and third party ANPR units. It is intended that the use of web services replace Scarab, and that Scarab be retired from operational use. BOF 2.3 provides a new set of web services providing equivalent functionality to those of 2.2. The new set of web services are more closely aligned with the principles and requirements of ISS4PS, moving away from the JAX-RPC 1.0 specification to the WS-I compliant SOAP provided by the JAX-WS standard . Web services connecting BOFs for the purpose of searching and sending read data have been duplicated with low level communication over sockets with the intention of reducing network traffic over CJX and providing a more secure means of communication. All data is encrypted using 256 bit AES encryption. All web services published with version 2.2 of BOF2 exist unchanged with the 2.3 release (to enable 2.2 versions of BOF2 to communicate with a BOF2 running 2.3), but are deprecated with the intention of being removed in subsequent releases.The main changes between BOF2.3 and BOF2.3.2 are:* Various Bug Fixes* Enhanced ACT Marker Handling* Database Performance Enhancements1.3 Using this DocumentThis document is one of a set describing the installation, use and maintenance of version 2.3 of the Back Office Facility (BOF 2.3).  The complete set of documents is:TechnicalBOF 2.3 Database Installation GuideDetails installation and configuration of the Oracle database for BOF 2.3BOF 2.3 Web Server Installation GuideDetails installation of the BOF 2.3 web applicationsBOF 2.3 Engineer GuideA reference guide covering the configuration of a BOF v2.3 installation.  This covers both initial configuration and ongoing reconfiguration. Upgrade BOF2.2 installation to 2.3 GuideDescribes the process for upgrading a BOF 2.3 system to BOF 2.3BOF 2.3 Web Services GuideDetails the web service interface to BOF 2.3 which can be used by third party systems to exchange data with BOF 2.3BOF 2.3 Developers Interface GuideProvides guidance to the development of custom interface software for force Command and Dispatch (CAD) and Intelligence (Intel) systemsUseBOF 2.3 User GuideDescribes everyday operation of the systemBOF 2.3 Administration GuideSet up and housekeeping functionsIn addition to these documents covering the main BOF v2.3 components there are further documents covering the optional components listed below:o BOF Data Minero BOF Disaster Recover o Make, Model, Colour Functionality1.4 
Main Document SectionThis document is split into the following main sections:Section 1	Introduction – covers the purpose of this document, sets it in context with the other documents in the set and gives a brief over view of BOFSection 2	Overview – Gives a brief overview of BOF’s Webs Services interfaceSection 3	Web Service categorizationSection 4 	Introduction to the  individuals Web Service.Section 5 	Describes Throttling, a critical feature of the web services interface, which is designed to avoid BOF being drowned in periods of excessive load.Section 5 	Describes the Error Handling mechanisms.Section 6	Functional Area: Call-on-HitSection 7	Functional Area: File OperationsSection 8	Functional Area: HotlistsSection 9	Functional Area: InputSection 10	Functional Area: Mobile UserSection 11	Functional Area: PNCSection 12	Release 2.2 to 2.3 Cross ReferenceSection 13	Support for SSLSection 14	Error HandlingSection 15	WSDL DefinitionsSection 16 Onwards 	Original 2.2 Web Services Document2 Overview2.1 Setup of “External Systems”For one force to discover another over CJX, a manual process exists whereby the web address of a force needs to be entered against an “External System” – a term used on BOF 2 to describe the details of another BOF or device that understands the web services API. To enable inter-BOF communication there is a requirement for each force firewall to open ports (usually 8081, but configurable) for inter-BOF communication via Web Services over CJX. For BOF2 version 2.3 there is also a need to open port 9123 to facilitate secure data exchange over sockets.  From the setup of “External Systems”, cross regional searching of reads, cross regional hotlist sharing and remote alarms can all be achieved. There is a textbox when editing an External System to enter whether the chosen BOF is currently running version 2.2 or 2.3. The version entered will determine how the current BOF attempts to communicate with the system. If an External System is marked as 2.2, then the current BOF will attempt to communicate via a web service call. If labelled 2.3, then the BOF will attempt to communicate to it through a socket port over TCP/IP. The version of an External System can be returned by editing an External System and clicking “Check Version”. There is no change required in the format of the web address for either version.2.2 Web Service PlatformsFrom its initial release, BOF2 has utilised the Apache Axis 1.2 framework for web services support. All web services were developed with a JAX-RPC style binding which can result in fairly complex and verbose XML and has now been effectively deprecated by the Web Services Interoperability Organisation’s Basic Profile (WS-I BP). To continue to meet and comply with the open industry standards of SOAP and XML, version 2.3 of BOF supplies a further set of web services using a document/literal style binding from the Sun standard JAX-WS implementation. The result is considerably less network traffic from a web service call, and WS-I compliant SOAP XML.2.3 Security	Depending on the method of communication between the BOF and a remote system, a force may insist that data passing across the link be encrypted. Encryption is implemented using SSL. If required to do so, third-party systems must ensure that they are using the correct protocol (https, as opposed to http), are communicating on the right port, and have a client certificate correctly installed. For further information about SSL implementation and the implications for connecting devices, please see the BOF 2.3 Engineer Guide.2.4 Accessing the WSDL for BOF2 web servicesAll web services for BOF2 (2.2 and 2.3 versions) can be accessed by the following URL:http://IP_ADDRESS_OF_WEB_SERVER:PORT/bof23 Web Service CategorisationThe web services presented to system integrators are grouped into a number of areas of functionality.  These are defined in the following table3.1 Web Service Functional GroupsFunctionalityDescriptionWeb Service MethodCall-on-HitFunctionality to allow an NRD to obtain information on any hits its captured data have initiatedwsRequestImagesFile OperationsFunctionality to identify files held on the BOF which an NRD may request to download and support to download those filesgetImportableFileNamesgetFileDataBlockgetFileSHA1HashSumgetFileStatusgetFileStatusAsStringgetRepoStatusHotlistsFunctionality to control hotlists.  This includes downloading hotlist data from BOF, requesting version details, requesting available hotlists etclistAllHotlistsgetHotlistsToRemovegetHotlistRepoStatusgetHotlistStatusgetHotlistUpdatesgetHotlistUpdatesRestrictSizegetMultipleHotlistUpdatesgetMultipleHotlistUpdatesRestrictSizesetHotlistStatusInputFunctionality to send ANPR capture information to a BOF for processingaddBinaryCaptureInformationsendCapturesendCompactCapturesendCompoundCaptureMobile-UserFunctionality to control access credentials for mobile users hosted on external mobile devices and to allow capture data to be supplemented with additional detailsgetMobileUserListupdateCaptureupdateMobilePasswordPNCFunctionality to allow PNC / Fasttrack lookups via the BOF and to return the resultsfastTrackResponsesmanualCheckpingPNC4 Web Services DefinitionsEach JAX-WS web service for BOF 2.3 is described, with information regarding the associated method(s) and the functionality behind each. Information regarding the deprecated JAX-RPC web services can be found in the BOF 2.2 Web Services document.4.1 Conventions Used4.1.1 TablesEach table contains four columns.  These columns represent:Attribute Name:The name of the attribute included in the method signature.  These map to the @WebParam() annotations shown in the method signatures.  All attributes are mandatory unless otherwise specified.  Optional fields are identified by the text '[Optional]'.  These may be assigned a null value.Java TypeThe type used by an attribute in the method signature.  This may be a Java primitive type, a Java defined Class type or a user defined Class type.  Note that primitive types are used extensively so be careful to differentiate between these and their Object equivalents, e.g. int versus Integer.Return types are given the default name return.Max size \ Database typeThe maximum size of a data item may be defined either as its natural size, e.g. an int maximum is 2**31-1, a lower defined size, e.g. a camera ID maximum is 99999, or by the containing Oracle data type, e.g. Varchar2(100 char) for a 100 character UTF-8 string.DescriptionA brief textual description of the field including its use, any special values and a reference to a more detailed description if required.4.1.2 Method StubsAll method stubs are defined using the standard annotation syntax defined in the Java API for XML-Based Web Services (JAX-WS).  For further information see here4.1.3 Return TypesIf a method has a return type, this is defined in the last row of the attribute definition table.  The form of the return type is defined as per the 'Java Type' column defined above.4.2 Date & Time ValuesThe 2.3 web services utilize the ISO 8601 date and time formats for information within SOAP messages.  The definition of date and time formats can be found here.  The date / time value is defined as schema type xsd:dateTime.5 ThrottlingIMPORTANTThis throttling algorithm must be implemented as specified by all software utilizing BOF2 Web Services.  Failure to correctly implement this may cause slow operation / failure of the BOF2 system.If an error code of 0002 is reported then this indicates that the BOF 2 system is busy processing requests.   This usually occurs after a restart when a large number of captures are queued, ready to send.  The rules for throttling generate a variable delay between web service calls, which automatically limits the load on the BOF 2 system.The algorithm for throttling is as follows:1. If ANY web service from a connecting application receives a 0002 code, then ALL web services from that application are required to throttle.2. The initial delay before re-attempting a web service call is two seconds (the minimum retry delay).3. If a subsequent call also encounters a 0002 code then the delay before the next attempt shall be doubled unless the maximum limit has been reached.4. The maximum retry time limit shall be five minutes (three hundred seconds)5. If a subsequent call does not encounter a 0002 code then the delay before the next attempt shall be halved unless the minimum retry limit has been reached.6. If an application has a minimum retry delay (two seconds) and a subsequent call does not encounter a 0002 code then the delay before the next attempt shall be zero. (No throttling)6 Functional Area: Call-on-Hit6.1 CallOnHitWebService6.1.1 WsRequestImagesBOF2.3 Web Services API has been extended to support ‘call on hit’ which will allow forces to configure their systems to only obtain plate patch and/or overview images from readers when a hit has occurred.Whenever a hit occurs on the BOF and the capture source sending the read in has been configured with “Call On Hit” enabled, a unique reference for the read is queued for that specific capture source. Each capture source sending reads into the BOF can then have it’s own queue of read references. The NRD can then call this web service, supplying the PNC ID and capture source id, and receive back its read references. Each reference comprises of the date/time (in milliseconds since 01/01/1970 00:00:00), VRM and camera URN. All available references will be supplied in a single response. The NRD is then responsible for supplying plate patch and overview data for each read via the normal web service calls to the BOF. The Java method signature for this operation is:public String [] wsRequestImages(       @WebParam(name="PNCID")String bof,        @WebParam(name="sourceID")String sourceId)       throws RemoteException{The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionPNCIDStringThe force PNC idSourceIdStringNumber(5)The source id for the camera groupreturnString ArraySee belowThe web service returns a String array of read references. A typical read reference would take the following format, with the capture date represented in milliseconds since 01/01/1970 00:00:00, the VRM and then the camera URN:1238678567964!A123BCD!10297 Functional Area: File Operations7.1 ImportableFileNamesService7.1.1 getImportableFileNamesThis operation returns all file names that can be imported by this camera group.The Java method signature for this operation is:public final String[] getImportableFileNames(@WebParam(name="sourceID")String sourceId)       throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceIDStringNumber(5)The source id for the camera groupreturnString ArrayA string array containing all the names of the files available to this device7.2 UpdateFilesServiceThis web service exposes files that have been stored by users in the BOF2 repository. The files are intended to be software updates to facilitate distribution to all devices connected to the BOF, but can be any type of file. See the BOF 2.3 User Guide for more information regarding the upload of files into the BOF2 repository.7.2.1 getFileDatablockThis operation gets a block of data from the file.  It is designed to allow users to retrieve a file in reasonable sized chunks. By requesting a chunk at a time the network is not tied up with one long request. The Java method signature for this operation is:	public BofFileDatablock getFileDatablock(@WebParam(name="filename")String fileName,  			@WebParam(name="version")long version, 			@WebParam(name="offset")long offset, 			@WebParam(name="blocksize")int blockSize) throws java.rmi.RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionFilenameStringVarchar2(100 char)The name of the fileVersionlongNumber(19)The revision number of the fileOffsetlongThe offset from the start of the file for the start of the block requiredBlocksizeintThe number of bytes to retrievereturnBofFileDatablockSee 8.1 for the full API for BofFileDataBlock7.2.2 getFileStatusAsStringThis operation gets the current revision number for the file. The file revision number is incremented on every change to the file.The Java method signature for this operation is:        public String[] getFileStatusAsString(@WebParam(name="sourceID")String sourceid)         throws java.rmi.RemoteException         The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceidStringNumber(5)The source id for the camera groupreturnString ArraySee below         The return value is an array of Strings, one String representing details for each updated file. The String value is a concatenation of the following java signatures from BofFileRevision (See 8.2 for the full API for BOFFileRevision). * getExternalSystemRevision()* getFileName()* getLatestRevision()7.2.3 getFileStatusThis operation gets the current revision number for the file. The file revision number is incremented on every change to the file.The Java method signature for this operation is:public BofFileRevision[] getFileStatus(@WebParam(name="sourceID")String sourceid) throws java.rmi.RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceidStringNumber(5)The source id for the camera groupreturnBOFFileRevision ArraySee 8.2 for the full API for BOFFileRevision7.2.4 getRepoStatusThis web service gets the current revision number for the file repository. The file repository revision number is incremented on every change to an included file.The Java method signature for this operation is:public long getRepoStatus(@WebParam(name="sourceID")String sourceId, @WebParam(name="revision number")long revNumber) throws java.rmi.RemoteException The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceidStringNumber(5)The source id for the camera groupreturnlong2**63-1The  current version number of the repository, or -1 if there are no changes since the last update7.2.5 getFileSHA1HashsumThis operation gets the Base64 encoded SHA1 hash of the file. It is designed to allow users to check the integrity of a downloaded file by comparing a locally computed hash against the hash stored on the BOF2 system.The Java method signature for this operation is:public String getFileSHA1Hashsum(@WebParam(name="filename")String fileName, @WebParam(name="version")long version) throws RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionFilenameStringVarchar2(100 char)The name of the fileVersionlongNumber(19)The revision number of the filereturnStringThe Base 64 encoded SHA1 hash of the file contents8 Functional Area: Hotlists 8.1 RemotelyInstalledHotlistWebService8.1.1 ListAllHotlistsThis operation sends the names of all the hotlists that are loaded on the source system. This web service is designed to allow central management of the hotlists held on a remote system by regularly sending a complete list of hotlists held on the rmote system to the bof.  The BOF compares them with the list of the names of hotlist shown as current for the given source. It will create any new entries and delete any entries	no longer appearing in the list.The hotlist names sent should include all the hotlists held locally including bulk hotlists, hotlists loaded from the bof and any hotlists loaded directly at the remote unit by using a CD/DVD or USB storage key or similar device.The Java method signature for this operation is:public void listAllHotlists(    @WebParam(name="sourceID")int in2,   @WebParam(name="hotlistnames")String[] in3) throws java.rmi.RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceIDStringNumber(5)The source id for the camera group?String?IntHotlistnamesArrayThe names of hotlists held by the camera groupreturnvoidN/A8.1.2 GetHotlistsToRemoveThis operation retrieves a list of the names of hotlists that the bof believes are loaded on the source system and which have been marked by an administrator as ‘must be removed’.   It is designed to allow central management of the hotlists held on a remote system by using List All Hotlists web service to find out what hotlists are loaded on the given source system and by using this sevice to provide a list of those hotlists that the administrator wants removed from the system.The Java method signature for this operation is:public String[] getHotlistsToRemove(    @WebParam(name="sourceID")int in2) throws RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionSourceIDStringNumber(5)The source id for the camera groupHotlistnamesArray String ?The names of hotlists held by the camera group?IntreturnString ArrayAn array of String objects representing the names of the hotlists that must be removed8.2 UpdateHotlistsServiceThe web service calls in this section can be used to download the hotlists that a recognition device has been allocated. For this to work on the BOF, each recognition device must be uniquely identified by its sourceIdentifier in order that the revision information for each hotlist on each recognition device is correctly maintained.8.2.1 getHotlistRepoStatusThis operation sends back the latest revision number of the BOF2 hotlist repository. The revision number will increment whenever changes to data within hotlists are made, or new hotlists are added.The Java method signature for this operation is:public long getHotlistRepoStatus(@WebParam(name="sourceID")String sourceID,       @WebParam(name="revisionnumber")long revNumber) throws RemoteException       The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsignatureOfSenderStringusernameStringsourceIDStringNumber(5)The source id for the camera grouprevNumberlongVarchar2(255)The current revision held by the camera group.returnlong2**63-1The current revision of the BOF2 hotlist repository.8.2.2 getHotlistStatusThis operation is provided to allow a mobile unit to fetch a list of hotlist names to which it is allowed to have access. For example, a car may be on a special operation. When the car connects to BOF 2, the source ID associated with the car (set in the mobileScarab.properties file) is passed to BOF 2, and a list of hotlists are returned that are associated with that car at that time. The revision number which the BOF believes the mobile unit holds is returned along with the current latest version in the BOF2 hotlist repository.	The Java method signature for this operation is:       public BofHotlistRevisions[] getHotlistStatus       (@WebParam(name="sourceID")String sourceID) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsignatureOfSenderStringusernameStringsourceIDStringNumber(5)The source id for the camera groupreturnBofHotlistRevisions ArraySee 8.3 for the full API of BofHotlistRevisionIt is intended that the status of hotlists be stored on the PRU and checked against the results returned by this call. If the “externalSystemRevision” is not correct it should send the correct revision that it holds for the hotlist using the “setHotlistStatus” Web service call prior to updating the hotlist (this information is used on the BOF to decide whether an update is required due to hotlist allocation changes). The data is also used to display the current status of hotlists on each PRU to BOF 2 users. If the “externalSystem” revision reflects the revision held by the PRU, it can then compare its revision with the “latestRevision” sent. If the “latestRevision” is -1 or null then the hotlist should be removed from the PRU as it is has been removed or de-assigned at the BOF 2 end. Similarly, if the PRU does not have a hotlist that is listed the “setHotlistStatus” web call should be called with the “currentRevision” set to -1 to inform the BOF the hotlist is deleted on the PRU. Finally, the PRU should check that it does not have any hotlists that are not in the array. These are hotlists which are not allocated to the PRU from BOF 2 and so should be removed.8.2.3 setHotlistStatusWhen the hotlist status on the PRU is changed or is identified as being out of sync with the BOF’s status for that PRU, the set hotlist Status call should be invoked. It is important to keep the status on BOF 2 up to date so a user can see what the state of hotlists is from the BOF 2 system and BOF 2 can subsequently identify updates. The status of one or many of hotlists can be set in one call as the hotlists in the array are updated exclusively.The Java method signature for this operation is:	public void setHotlistStatus(@WebParam(name="sourceID")String sourceID,	@WebParam(name="hotlistsAndrevisions")ExternalHotlistRevisions[] hotlistsAndRevisions) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsignatureOfSenderStringusernameStringSourceIDStringNumber(5)The source id for the camera grouphotlistsAndRevisionsArrayAn array of ExternalHotlistRevisions. See 8.4 for the full API for ExternalHotlistRevisions.returnvoidN/A8.2.4 getHotlistUpdatesRestrictSizeOnce the status of all hotlists has been compared, the PRU knows which hotlists it needs to update and can proceed to call the get hotlist update restricted size call on each.The Java method signature for this operation is:public BofHotlistData getHotlistUpdatesRestrictSize(@WebParam(name="sourceID")String sourceID, 	@WebParam(name="hotlistname")String hotlistName,        @WebParam(name="size")int size) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsignatureOfSystemStringuserNameStringsourceIDStringNumber(5)The source id for the camera grouphotlistnameStringVarchar2(100)Name of the hotlist to be updated.SizeIntMaximum size of the update to receive from the BOF. If the compressed hotlist updates are too big a BofHotlistData object with no data and the “toobig” flag set to true will be returnedreturnBofHotlistDataSee 8.5 for the full API for BofHotlistData.The hotlist revision details for the PRU are taken from the BOF2 status information synchronised in the earlier calls and the changes from that revision to the current revision are produced for this mobile unit. The latestRevision for this update is returned in the BofHotlistData object. This should be used to update the PRU’s status once the data has been successfully processed. The zip file in hotlistDeltas will contain either a delete and insert delta file (in that order) or a replace file, depending on which is smallest. The name of the file in the zip in each case will be as follows:Replace File:[cameragroupname]_[HotlistName]_R.datorDelete File: [cameragroupname]_[HotlistName]_D.datInsert File: [cameragroupname]_[HotlistName]_I.datThe files will be comma separated data lines in the 16-column format as follows:FieldMax SizeRequiredOptionsDescriptionVRM10YFree-TextNumber plate of vehicle eg.RV04ABCVehicle Make30 NFree-TextMake of vehicle: e.g. FordVehicle Model30NFree-TextModel of vehicle: e.g.EscortVehicle Colour30NFree-TextColour of vehicle: e.g.BlackAction254NSTOPSILENTINTELLNO_ALERTAction to be taken on hit: this may be one or more of the valid options delimited by colon ‘:’ e.g.STOP:INTELLWarning Markers254NNOTHING KNOWNFIREARMSWEAPONSVIOLENTFTSWarnings for stopping vehicle: this may be one or more of the valid options delimited by colon ‘:’ e.g.FIREARMS:VIOLENTReason254NDRUGSCRIMEDISQDOCSDRINKDRIVEDRUGDRIVESEXUALPROTESTReasons for stopping vehicle: this may be one or more of the valid options delimited by colon ‘:’ e.g.DRUG:DRUGDRIVENIM (5x5x5) Code10NFree-text3 character 5x5x5 NIM code for dataeg. A14Information /Action20000NFree-TextNotes about the vehicleForce & Area2000NFree-TextWeed Date50NValid dateDate in the format: dd-MM-yyyy HH:mm:ssPNC ID10NFree-TextPNC record reference IDGPMS Marking254NConfidentialRestrictedSecretUnclassifiedTop SecretOne and only one of the optionsCAD Information100NoFree TextSpare 1200NoFree TextSpare / UnusedSpare 2200NoFree TextSpare / UnusedShould the update create an update greater than the max Size the “isFileTooBig” Boolean value in the BofHotlistData object will be set to true and no data will be returned in the hotlistDeltas attribute. If this occurs it is intended that the PRU does not attempt an update on this hotlist until the system is connected by a higher bandwidth connection.Note: It is likely that this call may take some time especially over slower connections. For this reason web calls should have a relatively high timeout period of 5-10mins.8.2.5 getMultipleHotlistUpdatesRestrictSizeThis operation is an extension of getHotlistUpdatesRestrictSize, allowing multiple hotlist names to be sent at once, and returning an array of BofHotlistData objects.The Java method signature for this operation is:	public BofHotlistData[] getMultipleHotlistUpdatesRestrictSize       (@WebParam(name="sourceID")String sourceID, 	@WebParam(name="hotlistnames")String[] hotlistNames, 	@WebParam(name="size")int size) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsourceIDStringNumber(5)The source id for the camera grouphotlistnameArrayAn array of hotlist names to be updated.SizeIntMaximum size of each of the updates to receive from the BOF.returnBofHotlistDataSee 8.5 for the full API for BofHotlistData.8.2.6 getHotlistUpdatesThis operation is the same as getHotlistUpdatesRestrictSize except for the fact that no restriction is placed on the size of the updates returned from the BOF.The Java method signature for this operation is:public BofHotlistData getHotlistUpdates(@WebParam(name="sourceID")String sourceID,	@WebParam(name="hotlistname")String hotlistName) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsourceIDStringNumber(5)The source id for the camera grouphotlistnameStringVarchar2(100)Name of the hotlist to be updated.returnBofHotlistDataSee 8.5 for the full API for BofHotlistData.8.2.7 getMultipleHotlistUpdatesThis operation is the same as  getMultipleHotlistUpdatesRestrictSize except for the fact that no restriction is placed on the size of the updates returned from the BOF.The Java method signature for this operation is:	public BofHotlistData[] getMultipleHotlistUpdates       (@WebParam(name="sourceid")String sourceID, 	@WebParam(name="hotlistnames")String[] hotlistNames) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionsourceIDStringNumber(5)The source id for the camera grouphotlistnameStringVarchar2(100)Name of the hotlist to be updated.returnBofHotlistData ArraySee 8.5 for the full API for BofHotlistData.9 Functional Area: Input9.1 InputBinaryDataWebService9.1.1 addBinaryCaptureData	Due to bandwidth limitations over GSM and GPRS, it is possible that images need to be written to BOF 2 some time after the textual data for the read has been provided.  This operation allows an image to be sent either before or after a read. The operation contains enough information so that BOF2 can associate the textual information for the read sent using the sendCapture, sendCompactCapture or sendCompoundCapture messages with a previously-sent image.The Java method signature for this operation is:       public final String addBinaryCaptureData(       @WebParam(name="vrm")String vrm,        @WebParam(name="feedID")Short feedIdentifier, 		@WebParam(name="sourceID")Short sourceIdentifier,		@WebParam(name="cameraID")Short cameraIdentifier, 		@WebParam(name="capturedate")Date captureTime, 		@WebParam(name="binaryimage")byte[] binaryImage,		@WebParam(name="binarydatatype")String binaryDataType) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionVrmStringVarchar2(10 char)Vehicle Registration MarkFeedIDShortNumber(5)Usually the force PNC idSourceIDShortNumber(5)The source id for the camera groupCameraIDShortNumber(5)The ID for the cameraCaptureDateDateThe date that the read was captured by the cameraBinaryImageByte[]The image in binary formBinaryDataTypeString“P” = plate“O” = overviewReturnStringThe VRM if the image was processed and the binary data (image) was successfully saved.9.2 InputCaptureWebService9.2.1 SendCaptureThis operation allows a mobile unit to send a read object to BOF2. It is also available for third party systems to pass on their reads to BOF2. The read data that is sent may optionally contain images. However, if bandwidth between the mobile unit and BOF 2 is limited, the read object may be passed without any images. However, this is most efficiently achieved using the sendCompactCapture or sendCompoundCapture web service calls.The Java method signature for this operation is:	public final String sendCapture(@WebParam(name="vrm")String vrm,@WebParam(name="feedID")Short feedIdentifier, @WebParam(name="sourceID")Short sourceIdentifier, 		@WebParam(name="cameraID")Short cameraIdentifier,       @WebParam(name="plateimage")byte[] plateJpegImage, @WebParam(name="overviewimage")byte[] overviewJpegImage, @WebParam(name="capturedate")Date captureTime, 		@WebParam(name="latitude")Float latitude,       @WebParam(name="longitude")Float longitude, 		@WebParam(name="camerapresetposition")Short cameraPresetPosition, @WebParam(name="camerapan")String cameraPan, @WebParam(name="cameratilt")String cameraTilt,		@WebParam(name="camerazoom")String cameraZoom, 		@WebParam(name="confidencepercentage")Byte confidencePercentage, 		@WebParam(name="motiontowardcamera")Boolean motionTowardCamera)				throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionVrmStringVarchar2(10 char)The vehicle registration markFeedIDShortNumber(5)The force PNC id.SourceIDShortNumber(5)The source id for the camera groupCameraIDShortNumber(5)The id for the cameraPlateImagebyte[]Optional. Can be sent laterOverviewimagebyte[]Optional. Can be sent laterCaptureDateDateDate that the read was captured by the cameraLatitudeFloatPosition of the cameraLongitudeFloatPosition of the cameraCameraPresetPosition [Optional]ShortNumber(5)Preset position of the cameraCameraPan [Optional]StringVarchar2(20 char)Pan angle of the cameraCameraTilt [Optional]StringVarchar2(20 char)Tilt angle of the cameraCameraZoom [Optional]StringVarchar2(20 char)Zoom level of the cameraConfidencePercentageByteNumber(3)Confidence level representing the accuracy of the readMotionTowardCamera [Optional]BooleanMotion towards or away from the camerareturnStringSee belowThe web service sends back a String, which is a unique reference to the read if the read was validated correctly and the read was successfully saved in the BOF 2 database. A typical read reference would take the following format, with the capture date represented in milliseconds since 01/01/1970 00:00:00, the VRM next and then the camera urn. Each field is delimited by an exclamation mark:1238678567964!A123BCD!10299.2.2 SendCompactCaptureThis operation has been developed to allow mobile units to pass in plate reads faster and more efficiently by sending a single delimited string.Note: for sending more than one capture at a time the Send Compound Reads Web service is more efficient, this is described below. It is intended that compact and compound read calls are used together dependent on the amount of textual capture information to be sent to BOF 2.The Java method signature for this operation is:public final String sendCompactCapture(@WebParam(name="capture")String capture) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionCaptureStringDelimited version of sendCapture web service. The delimiter is a vertical pipe character followed by a space (“| ”). Please ensure that any null fields are delimited in this way.returnStringSee belowThe fields for the capture string are defined as follows:ItemAttribute nameMax size \ Database typeDescription0SignatureOfSenderPublic key of sender. ** NOT USED **1Username32 CharactersLogin name of user on mobile unit operating the camera. Logged against the read.2VrmVarchar2(10 char)The vehicle registration mark3FeedIDNumber(5)The force PNC id.4SourceIDNumber(5)The source id for the camera group5CameraIDNumber(5)The id for the camera6CaptureDateNumber(19)Date in milliseconds since the epoch.7LatitudeFloatPosition of the camera8LongitudeFloatPosition of the camera9CameraPresetPosition [Optional]Number(5)Preset position of the camera10CameraPan [Optional]Varchar2(20 char)Pan angle of the camera11CameraTilt [Optional]Varchar2(20 char)Tilt angle of the camera12CameraZoom [Optional]Varchar2(20 char)Zoom level of the camera13ConfidencePercentageNumber(3)Confidence level representing the accuracy of the read14MotionTowardCamera [Optional]BooleanMotion towards or away from the camera. Represented as True or FalseThe web service sends back a String, which is a unique reference to the read if the read was validated correctly and the read was successfully saved in the BOF 2 database. A typical read reference would take the following format, with the capture date represented in milliseconds since 01/01/1970 00:00:00, the VRM next and then the camera urn. Each field is delimited by an exclamation mark:1238678567964!A123BCD!10299.2.3 SendCompoundCaptureIf a mobile unit has been offline for a period of time, a backlog of reads might have built up. These need to be transferred into BOF2 as quickly as possible when connectivity is established. To establish this, an extension of the ‘Send Compact Read’ web service has been built that allows multiple delimited strings to be passed as an array into BOF 2. The maximum number of reads that can be sent per message is 50.The Java method signature for this operation is:public final String sendCompoundCapture(@WebParam(name="captures")String[] captures) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionCapturesArrayAn array of delimited Strings. Each string is the same as SendCompactCapture web service. The delimiter is a vertical pipe character (“| ”). Ensure that any null fields are delimited in this way.returnStringSee belowThe operation returns an array of unique references to the reads if they were validated correctly. If one or more of the reads in the compound array does not get inserted into BOF 2 for whatever reason, the element in the array that is returned is set to “ERROR” for the erroneous capture. For example, if 50 captures are passed in and captures 23, 34 and 37 produce an error, the array that comes back will have 50 elements, each containing a unique reference to the inserted capture. However, elements 23, 34 and 37 will contain the “ERROR” string.10 Functional Area: Mobile User10.1 MobileUsersWebService10.1.1 UpdateMobilePasswordThis operation allows the remote user to change their mobile password. The Java method signature for this operation is;	public void updateMobilePassword       (@WebParam(name="username")String username, 		@WebParam(name="newpassword")String newPassword) throws RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionUsernameStringVarchar2(64 char)The login name for the BOF2 user accountNewPasswordStringVarchar2(255 char)The new mobile passwordreturnvoidN/AThe mobile user must be a user with an account on the BOF 2 system. Such a user will have 2 passwords, their main BOF 2 login password (system password) and their mobile password. When the system password is changed at a BOF 2 terminal, then both the system and mobile passwords will be changed. However, when a user changes their password remotely from a mobile unit, only the mobile password is changed. In addition, after a remote password change a flag is set to force the user to change their system password at next login from a BOF 2 terminal.The user’s new mobile password will be whatever password has been allowed by the mobile system. We would envisage that all mobile systems will enforce compliance with appropriate Police Authority recommendations. However, the BOF 2 system will not enforce this, and will accept short passwords and even a blank password. IT IS THE MOBILE SYSTEM’S RESPONSIBILITY TO ENSURE THAT PASSWORDS ARE ADEQUATE.10.1.2 GetMobileUsersListThis operation allows mobile units to retrieve a current list of the login names, permissions and encrypted passwords for all users whose BOF 2 user record is marked with the mobile user flag.The Java method signature for this operation is;	public String getMobileUsersList() throws java.rmi.RemoteException {The operation returns a String representing an xml document containing the loginname, sha1 password and permissions of mobile users.10.1.3 UpdateCaptureThis web service allows a mobile user to enter details against a read that has been sent through the BOF 2 system.The Java method signature for this operation is;	public void updateCapture       (@WebParam(name="captureidentifier")String captureIdentifier, 	 @WebParam(name="text")String text,          @WebParam(name="code")int code) throws RemoteException {The data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionCaptureidentifierStringA concatenated string of capture date, VRM and camera URN separated by an exclamation mark. The same string format as returned by the sendCapture web service is usedTextStringVarchar2(255 char)The response informationcodeintNumber(10)The response codereturnvoidN/AThe captureIdentifier is the ID sent back from web services allowing for the input of read data into the BOF 2 system. Any subsequent hits that have been generated by the read will also have the response information and code stored against them.A captureIdentifier would take the following format, with the capture date represented in milliseconds since 01/01/1970 00:00:00, the VRM next and then the camera urn. Each field is delimited by an exclamation mark:1238678567964!A123BCD!102911 Functional Area: PNC11.1 PingPNCWebService11.1.1 PingPNCThe PNC Status web service allows a mobile unit to check with BOF 2 as to whether the ‘FastTrack’ connection to the PNC is alive.The Java method signature for this operation is;       public Boolean pingPNC() throws RemoteExceptionAttribute nameJava typeMax size \ Database typeDescriptionreturnBooleanA boolean indicating the current status of the PNC connection (true=good)11.1.2 ManualCheckDepending on how the BOF is configured, this operation will perform either a #VE or #VK against PNC.The Java method signature for this operation is:	public Object manualCheck(@WebParam(name="username")String username, 			@WebParam(name="reasoncode")Integer reasonCode, 			@WebParam(name="vrm")String vrm,			@WebParam(name="sourceID")Short sourceId) throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionUsernameStringUser name of the user operating the camera groupReasonCodeInteger1A number between 1 and 7 indicating the reason for the manual checkVrmStringVarchar2(10)The vehicle registration markSourceIdShortNumber(5)The source id for the camera groupreturnObjectThe operation returns back a byte[] that contains the output from the PNC for the supplied VRMA valid PNC reason code must be supplied as part of this query. The following list summarises these reason codes.PNC Reason CodeDescription01Vehicle and/or person stopped, i.e. a street check.  This code would be used for property checks where the person stopped has property with them or in their vehicle.02Moving vehicle - used where the vehicle has just been seen but at the time of the check has not been stopped.03Abandoned or parked and unattended vehicle.  Would also be used where property has been found other than in the possession of a person.04Vehicles involved in a road traffic collision.  The Originator field would be used to record the location and/or the report reference if appropriate.05Subject of process or investigation, e.g. in custody.  The source document would be a custody record, process report or crime report.06Administration - for non-operational matters including security vetting, complainants, CTO/DSU/ASU or for intelligence.07Enquiries relating to family protection issues.08On behalf of other authorized agency.11.1.3 FastTrackResponseWhen a mobile unit passes captures into BOF 2 for matching against the PNC (and other hotlists), if there is a ‘FastTrack Response’ (FTR), a mechanism needs to be in place to return the FTR to the mobile unit. Previous versions of the software on the mobile unit used an outgoing queue from the BOF to the mobile unit (one per mobile unit), into which a FTR was placed if required. The outgoing queues have been abandoned as a feedback mechanism, replaced by this web service call. The sender effectively polls the BOF 2 system to see if there are any FTRs available for it.The Java method signature for this operation is:	public Object[] fastTrackResponses(@WebParam(name="username")String username, @WebParam(name="sourceID")Integer sourceIdentifier)				throws RemoteExceptionThe data that is sent is defined below:Attribute nameJava typeMax size \ Database typeDescriptionUsernameStringUser name of the user operating the camera groupSourceIdIntegerNumber(5)The source id for the camera groupreturnObject[]An array of byte[] representation of the FTR file that is created as part of the FastTrack matching12 Release 2.2 to 2.3 Cross ReferenceThis table cross references functionality equivalent web service methods between the 2.3 and 2.2 releases of the BOF software.2.3 Web Service Method2.2 Web Service MethodCall-on-Hit-wsRequestImagesNot SupportedFile Operations-getImportableFileNamesgetImportableFileNamesgetFileDataBlockgetFileDataBlockgetFileSHA1HashSumgetFileSHA1HashSumgetFileStatusgetFileStatusgetFileStatusAsStringgetFileStatusAsStringgetRepoStatusgetRepoStatusHotlists-listAllHotlistslistAllHotlistsgetHotlistsToRemovegetHotlistsToRemovegetHotlistRepoStatusgetRepoStatusgetHotlistStatusgetHotlistStatusgetHotlistUpdatesgetHotlistUpdatesgetHotlistUpdatesRestrictSizegetHotlistUpdatesRestrictSizegetMultipleHotlistUpdatesNot SupportedgetMultipleHotlistUpdatesRestrictSizeNot SupportedsetHotlistStatussetHotlistStatusInputaddBinaryCaptureInformationaddBinaryCaptureInformationsendCapturesendCapturesendCompactCapturesendCompactCapturesendCompoundCapturesendCompoundCaptureMobile-UsergetMobileUserListgetMobileUserListupdateCaptureupdateCaptureupdateMobilePasswordupdateMobilePasswordPNCfastTrackResponsesfastTrackResponsesmanualCheckmanualCheckpingPNCpingPNCNo Longer Supported in 2.3N/AdeleteHotlistN/AalertForCaptureN/AcreateOrUpdateHotlistN/AquickCheckN/AgetCaptureImageN/ApingN/Asearch13 Support for SSL13.1 Web ServerThe BOF application relies on the Apache Tomcat 6 web server to handle all HTTP protocol issues including SSL communications.  Once SSL has been correctly configured, it may be used with all the BOF web services.  To configure SSL, refer to the Apache Tomcat 6.0 SSL Configuration HOW-TO document which may be found here.[ http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html]13.2 CertificatesNeither the BOF nor the Apache Tomcat web server constitutes a certificate authority.  Certificates shall have to be obtained and managed via a third party certificate authority or certificate application.13.3 Which Web Services ?If SSL mode is selected, then all the 2.3 web service methods require to be called using a secure link.  If a non-SSL connection is used, the following error string is generated:0006: The web service must be called using SSLThe following 2.2 web service methods do not require SLL and will not generate an error if called insecurely while SSL mode is selected:1. getCaptureImage2. ping3. quickCheck4. search5. setHotlistStatus14 Error HandlingThis section details the corrective actions required whenever an error condition is detected.  An error is generated by an exception being thrown to the calling application.When an exception is thrown, the textual error message may contain a code to define what the error is.  Various actions will need to be taken depending on this code.  The code shall comprise the first four character of the message (if available).Error CodeDescriptionAction0001System not readyWait for 1 minute and retry0002System busyThrottle (Important - see section 5)0003Web services are presently disabledTry again later0004The system is in the wrong mode to accept this web service A web service request was sent to the wrong server in a multi server system0005The web service is unknown in the allow / disallow listThe wrong web service was called so correct and try again0006The web service must be called using SSLRecode your call to use SSL0010Invalid capture informationDo not resend this information.  May indicate a defect in the sending application0011Error when pinging systemUnknown PNC ID0012Error getting importable file namesInternal Error – Report via Northgate support0013Error getting file data blockBad paramters, e.g. unknown file name, bad offset0014Error getting file statusBad parameter, e.g. unknown file0015Error getting repo statusInternal Error – Report via Northgate support0016Error getting SHA1 hash sumBad parameter, e.g. unknown file0017Error adding hotlist entryBad parameter, e.g. unknown hotlist 0018createOrUpdateHotlist failed to create or update hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>Bad parameter, e.g. unknown hotlist 0019createOrUpdateHotlist failed to update hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>Bad parameter, e.g. unknown hotlist 0020createOrUpdateHotlist failed to create hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>Bad parameter, e.g. unknown hotlist 0021createOrUpdateHotlist failed to add entries to hotlist<hotlistName> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>Bad parameter, e.g. unknown hotlist 0022createOrUpdateHotlist failed to add entries to hotlist<hotlistName> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId>Bad parameter, e.g. unknown hotlist 0023AlertWebService Error sending captureDeprecated in 2.30024InputCaptureWebService Error sending captureDo not resend this information.  May indicate a defect in the sending application0025Error processing matchesInternal Error – Report via Northgate support0026Error getting Mobile users ListBad parameter, e.g. unknown username0027Error updating Mobile passwordBad parameter, e.g. unknown username0028Error updating captureBad parameter, e.g. unknown captureidentifier0029AlertWebService Error putting event on pushlet stackBad parameter, e.g. unknown resultsUrn0030AlertWebService Error informing user about query completionBad parameter, e.g. unknown username0031Error pinging PNC connectionInternal Error – Report via Northgate support0032Cannot perform manual PNC #ve checkBad parameter, e.g null reasonCode0033Cannot fetch FTRs for sourceIdentifierBad parameter, e.g null sourceIdentifier0034Error getting importable hotlist namesInternal Error – Report via Northgate support0035Error getting hotlist updates for source ID <sourceID>Bad parameter, e.g. unknown hotlist 0036Error getting hotlist statusBad parameter, e.g. unknown username0037Error getting repo status for source ID <sourceID>Bad parameter, e.g. unknown username0038Error setting hotlist statusBad parameter, e.g. unknown username0039Error searching capturesInternal Error – Report via Northgate support0040Error returning call on hit identifiersBad parameter, e.g unknown sourceId0041Reserved for future useDo not resend this information.  May indicate a defect in the sending application0042Reserved for future useDo not resend this information.  May indicate a defect in the sending application0043Reserved for future useDo not resend this information.  May indicate a defect in the sending application0044Reserved for future useDo not resend this information.  May indicate a defect in the sending application0045Reserved for future useDo not resend this information.  May indicate a defect in the sending application0046Reserved for future useDo not resend this information.  May indicate a defect in the sending application0047Reserved for future useDo not resend this information.  May indicate a defect in the sending application0048Reserved for future useDo not resend this information.  May indicate a defect in the sending application0049Reserved for future useDo not resend this information.  May indicate a defect in the sending application0050Reserved for future useDo not retry this information more than 3 times.0051Reserved for future useDo not retry this information more than 3 times0052Reserved for future useDo not retry this information more than 3 times0053Reserved for future useDo not retry this information more than 3 times0054Reserved for future useDo not retry this information more than 3 times0055Reserved for future useDo not retry this information more than 3 times0056Reserved for future useDo not retry this information more than 3 times0057Reserved for future useDo not retry this information more than 3 times0058Reserved for future useDo not retry this information more than 3 times0059Reserved for future useDo not retry this information more than 3 times0050Reserved for future useDo not retry this information more than 3 times9999Internal ErrorInternal Error – Report via Northgate supportNo codeInternal ErrorInternal Error – Report via Northgate supportNOTE:	To allow additional error messages to be returned with any upgrades an interface will only be deemed compatible if it processes all error codes correctly, including those reserved for future use.15 WSDL DefinitionsThe following section details the WSDL for each web service described.15.1 UpdateFilesService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://fileops.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://fileops.ws.bof2.anite.com/" name="UpdateFilesServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://fileops.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/UpdateFilesService?xsd=1" />   </xsd:schema>  </types>- <message name="getFileDatablock">  <part name="parameters" element="tns:getFileDatablock" />   </message>- <message name="getFileDatablockResponse">  <part name="parameters" element="tns:getFileDatablockResponse" />   </message>- <message name="getFileStatusAsString">  <part name="parameters" element="tns:getFileStatusAsString" />   </message>- <message name="getFileStatusAsStringResponse">  <part name="parameters" element="tns:getFileStatusAsStringResponse" />   </message>- <message name="getFileStatus">  <part name="parameters" element="tns:getFileStatus" />   </message>- <message name="getFileStatusResponse">  <part name="parameters" element="tns:getFileStatusResponse" />   </message>- <message name="getRepoStatus">  <part name="parameters" element="tns:getRepoStatus" />   </message>- <message name="getRepoStatusResponse">  <part name="parameters" element="tns:getRepoStatusResponse" />   </message>- <message name="getFileSHA1Hashsum">  <part name="parameters" element="tns:getFileSHA1Hashsum" />   </message>- <message name="getFileSHA1HashsumResponse">  <part name="parameters" element="tns:getFileSHA1HashsumResponse" />   </message>- <portType name="UpdateFilesService">- <operation name="getFileDatablock">  <input message="tns:getFileDatablock" />   <output message="tns:getFileDatablockResponse" />   </operation>- <operation name="getFileStatusAsString">  <input message="tns:getFileStatusAsString" />   <output message="tns:getFileStatusAsStringResponse" />   </operation>- <operation name="getFileStatus">  <input message="tns:getFileStatus" />   <output message="tns:getFileStatusResponse" />   </operation>- <operation name="getRepoStatus">  <input message="tns:getRepoStatus" />   <output message="tns:getRepoStatusResponse" />   </operation>- <operation name="getFileSHA1Hashsum">  <input message="tns:getFileSHA1Hashsum" />   <output message="tns:getFileSHA1HashsumResponse" />   </operation>  </portType>- <binding name="UpdateFilesServicePortBinding" type="tns:UpdateFilesService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="getFileDatablock">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileStatusAsString">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getRepoStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileSHA1Hashsum">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="UpdateFilesServiceService">- <port name="UpdateFilesServicePort" binding="tns:UpdateFilesServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/UpdateFilesService" />   </port>  </service>  </definitions>15.2 ImportableFileNamesService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://fileops.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://fileops.ws.bof2.anite.com/" name="UpdateFilesServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://fileops.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/UpdateFilesService?xsd=1" />   </xsd:schema>  </types>- <message name="getFileDatablock">  <part name="parameters" element="tns:getFileDatablock" />   </message>- <message name="getFileDatablockResponse">  <part name="parameters" element="tns:getFileDatablockResponse" />   </message>- <message name="getFileStatusAsString">  <part name="parameters" element="tns:getFileStatusAsString" />   </message>- <message name="getFileStatusAsStringResponse">  <part name="parameters" element="tns:getFileStatusAsStringResponse" />   </message>- <message name="getFileStatus">  <part name="parameters" element="tns:getFileStatus" />   </message>- <message name="getFileStatusResponse">  <part name="parameters" element="tns:getFileStatusResponse" />   </message>- <message name="getRepoStatus">  <part name="parameters" element="tns:getRepoStatus" />   </message>- <message name="getRepoStatusResponse">  <part name="parameters" element="tns:getRepoStatusResponse" />   </message>- <message name="getFileSHA1Hashsum">  <part name="parameters" element="tns:getFileSHA1Hashsum" />   </message>- <message name="getFileSHA1HashsumResponse">  <part name="parameters" element="tns:getFileSHA1HashsumResponse" />   </message>- <portType name="UpdateFilesService">- <operation name="getFileDatablock">  <input message="tns:getFileDatablock" />   <output message="tns:getFileDatablockResponse" />   </operation>- <operation name="getFileStatusAsString">  <input message="tns:getFileStatusAsString" />   <output message="tns:getFileStatusAsStringResponse" />   </operation>- <operation name="getFileStatus">  <input message="tns:getFileStatus" />   <output message="tns:getFileStatusResponse" />   </operation>- <operation name="getRepoStatus">  <input message="tns:getRepoStatus" />   <output message="tns:getRepoStatusResponse" />   </operation>- <operation name="getFileSHA1Hashsum">  <input message="tns:getFileSHA1Hashsum" />   <output message="tns:getFileSHA1HashsumResponse" />   </operation>  </portType>- <binding name="UpdateFilesServicePortBinding" type="tns:UpdateFilesService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="getFileDatablock">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileStatusAsString">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getRepoStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getFileSHA1Hashsum">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="UpdateFilesServiceService">- <port name="UpdateFilesServicePort" binding="tns:UpdateFilesServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/UpdateFilesService" />   </port>  </service>  </definitions>15.3 UpdateHotlistsService  <?xml version="1.0" encoding="UTF-8" ?> - <!--  Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.4-b01-.   --> - <!--  Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.4-b01-.   --> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://hotlist.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://hotlist.ws.bof2.anite.com/" name="UpdateHotlistsServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://hotlist.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/UpdateHotlistsService?xsd=1" />   </xsd:schema>  </types>- <message name="getHotlistUpdatesRestrictSize">  <part name="parameters" element="tns:getHotlistUpdatesRestrictSize" />   </message>- <message name="getHotlistUpdatesRestrictSizeResponse">  <part name="parameters" element="tns:getHotlistUpdatesRestrictSizeResponse" />   </message>- <message name="getHotlistUpdates">  <part name="parameters" element="tns:getHotlistUpdates" />   </message>- <message name="getHotlistUpdatesResponse">  <part name="parameters" element="tns:getHotlistUpdatesResponse" />   </message>- <message name="getMultipleHotlistUpdatesRestrictSize">  <part name="parameters" element="tns:getMultipleHotlistUpdatesRestrictSize" />   </message>- <message name="getMultipleHotlistUpdatesRestrictSizeResponse">  <part name="parameters" element="tns:getMultipleHotlistUpdatesRestrictSizeResponse" />   </message>- <message name="getMultipleHotlistUpdates">  <part name="parameters" element="tns:getMultipleHotlistUpdates" />   </message>- <message name="getMultipleHotlistUpdatesResponse">  <part name="parameters" element="tns:getMultipleHotlistUpdatesResponse" />   </message>- <message name="getHotlistStatus">  <part name="parameters" element="tns:getHotlistStatus" />   </message>- <message name="getHotlistStatusResponse">  <part name="parameters" element="tns:getHotlistStatusResponse" />   </message>- <message name="getHotlistRepoStatus">  <part name="parameters" element="tns:getHotlistRepoStatus" />   </message>- <message name="getHotlistRepoStatusResponse">  <part name="parameters" element="tns:getHotlistRepoStatusResponse" />   </message>- <message name="setHotlistStatus">  <part name="parameters" element="tns:setHotlistStatus" />   </message>- <message name="setHotlistStatusResponse">  <part name="parameters" element="tns:setHotlistStatusResponse" />   </message>- <portType name="UpdateHotlistsService">- <operation name="getHotlistUpdatesRestrictSize">  <input message="tns:getHotlistUpdatesRestrictSize" />   <output message="tns:getHotlistUpdatesRestrictSizeResponse" />   </operation>- <operation name="getHotlistUpdates">  <input message="tns:getHotlistUpdates" />   <output message="tns:getHotlistUpdatesResponse" />   </operation>- <operation name="getMultipleHotlistUpdatesRestrictSize">  <input message="tns:getMultipleHotlistUpdatesRestrictSize" />   <output message="tns:getMultipleHotlistUpdatesRestrictSizeResponse" />   </operation>- <operation name="getMultipleHotlistUpdates">  <input message="tns:getMultipleHotlistUpdates" />   <output message="tns:getMultipleHotlistUpdatesResponse" />   </operation>- <operation name="getHotlistStatus">  <input message="tns:getHotlistStatus" />   <output message="tns:getHotlistStatusResponse" />   </operation>- <operation name="getHotlistRepoStatus">  <input message="tns:getHotlistRepoStatus" />   <output message="tns:getHotlistRepoStatusResponse" />   </operation>- <operation name="setHotlistStatus">  <input message="tns:setHotlistStatus" />   <output message="tns:setHotlistStatusResponse" />   </operation>  </portType>- <binding name="UpdateHotlistsServicePortBinding" type="tns:UpdateHotlistsService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="getHotlistUpdatesRestrictSize">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getHotlistUpdates">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getMultipleHotlistUpdatesRestrictSize">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getMultipleHotlistUpdates">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getHotlistStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getHotlistRepoStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="setHotlistStatus">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="UpdateHotlistsServiceService">- <port name="UpdateHotlistsServicePort" binding="tns:UpdateHotlistsServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/UpdateHotlistsService" />   </port>  </service>  </definitions>15.3.1 15.4 RemotelyInstalledHotlistWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://remotelyinstalled.hotlist.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://remotelyinstalled.hotlist.ws.bof2.anite.com/" name="RemotelyInstalledHotlistWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://remotelyinstalled.hotlist.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/RemotelyInstalledHotlistWebService?xsd=1" />   </xsd:schema>  </types>- <message name="listAllHotlists">  <part name="parameters" element="tns:listAllHotlists" />   </message>- <message name="listAllHotlistsResponse">  <part name="parameters" element="tns:listAllHotlistsResponse" />   </message>- <message name="getHotlistsToRemove">  <part name="parameters" element="tns:getHotlistsToRemove" />   </message>- <message name="getHotlistsToRemoveResponse">  <part name="parameters" element="tns:getHotlistsToRemoveResponse" />   </message>- <portType name="RemotelyInstalledHotlistWebService">- <operation name="listAllHotlists">  <input message="tns:listAllHotlists" />   <output message="tns:listAllHotlistsResponse" />   </operation>- <operation name="getHotlistsToRemove">  <input message="tns:getHotlistsToRemove" />   <output message="tns:getHotlistsToRemoveResponse" />   </operation>  </portType>- <binding name="RemotelyInstalledHotlistWebServicePortBinding" type="tns:RemotelyInstalledHotlistWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="listAllHotlists">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getHotlistsToRemove">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="RemotelyInstalledHotlistWebServiceService">- <port name="RemotelyInstalledHotlistWebServicePort" binding="tns:RemotelyInstalledHotlistWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/RemotelyInstalledHotlistWebService" />   </port>  </service>  </definitions>15.5 InputCaputureWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://input.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://input.ws.bof2.anite.com/" name="InputCaptureWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://input.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/InputCaptureWebService?xsd=1" />   </xsd:schema>  </types>- <message name="sendCapture">  <part name="parameters" element="tns:sendCapture" />   </message>- <message name="sendCaptureResponse">  <part name="parameters" element="tns:sendCaptureResponse" />   </message>- <message name="sendCompactCapture">  <part name="parameters" element="tns:sendCompactCapture" />   </message>- <message name="sendCompactCaptureResponse">  <part name="parameters" element="tns:sendCompactCaptureResponse" />   </message>- <message name="sendCompoundCapture">  <part name="parameters" element="tns:sendCompoundCapture" />   </message>- <message name="sendCompoundCaptureResponse">  <part name="parameters" element="tns:sendCompoundCaptureResponse" />   </message>- <portType name="InputCaptureWebService">- <operation name="sendCapture">  <input message="tns:sendCapture" />   <output message="tns:sendCaptureResponse" />   </operation>- <operation name="sendCompactCapture">  <input message="tns:sendCompactCapture" />   <output message="tns:sendCompactCaptureResponse" />   </operation>- <operation name="sendCompoundCapture">  <input message="tns:sendCompoundCapture" />   <output message="tns:sendCompoundCaptureResponse" />   </operation>  </portType>- <binding name="InputCaptureWebServicePortBinding" type="tns:InputCaptureWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="sendCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="sendCompactCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="sendCompoundCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="InputCaptureWebServiceService">- <port name="InputCaptureWebServicePort" binding="tns:InputCaptureWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/InputCaptureWebService" />   </port>  </service>  </definitions>15.6 InputBinaryDataWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://input.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://input.ws.bof2.anite.com/" name="InputBinaryDataWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://input.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/InputBinaryDataWebService?xsd=1" />   </xsd:schema>  </types>- <message name="addBinaryCaptureData">  <part name="parameters" element="tns:addBinaryCaptureData" />   </message>- <message name="addBinaryCaptureDataResponse">  <part name="parameters" element="tns:addBinaryCaptureDataResponse" />   </message>- <message name="sendCapture">  <part name="parameters" element="tns:sendCapture" />   </message>- <message name="sendCaptureResponse">  <part name="parameters" element="tns:sendCaptureResponse" />   </message>- <message name="sendCompactCapture">  <part name="parameters" element="tns:sendCompactCapture" />   </message>- <message name="sendCompactCaptureResponse">  <part name="parameters" element="tns:sendCompactCaptureResponse" />   </message>- <message name="sendCompoundCapture">  <part name="parameters" element="tns:sendCompoundCapture" />   </message>- <message name="sendCompoundCaptureResponse">  <part name="parameters" element="tns:sendCompoundCaptureResponse" />   </message>- <portType name="InputBinaryDataWebService">- <operation name="addBinaryCaptureData">  <input message="tns:addBinaryCaptureData" />   <output message="tns:addBinaryCaptureDataResponse" />   </operation>- <operation name="sendCapture">  <input message="tns:sendCapture" />   <output message="tns:sendCaptureResponse" />   </operation>- <operation name="sendCompactCapture">  <input message="tns:sendCompactCapture" />   <output message="tns:sendCompactCaptureResponse" />   </operation>- <operation name="sendCompoundCapture">  <input message="tns:sendCompoundCapture" />   <output message="tns:sendCompoundCaptureResponse" />   </operation>  </portType>- <binding name="InputBinaryDataWebServicePortBinding" type="tns:InputBinaryDataWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="addBinaryCaptureData">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="sendCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="sendCompactCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="sendCompoundCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="InputBinaryDataWebServiceService">- <port name="InputBinaryDataWebServicePort" binding="tns:InputBinaryDataWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/InputBinaryDataWebService" />   </port>  </service>  </definitions>15.7 MobileUsersWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://mobileuser.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://mobileuser.ws.bof2.anite.com/" name="MobileUsersWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://mobileuser.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/MobileUsersWebService?xsd=1" />   </xsd:schema>  </types>- <message name="updateMobilePassword">  <part name="parameters" element="tns:updateMobilePassword" />   </message>- <message name="updateMobilePasswordResponse">  <part name="parameters" element="tns:updateMobilePasswordResponse" />   </message>- <message name="getMobileUsersList">  <part name="parameters" element="tns:getMobileUsersList" />   </message>- <message name="getMobileUsersListResponse">  <part name="parameters" element="tns:getMobileUsersListResponse" />   </message>- <message name="updateCapture">  <part name="parameters" element="tns:updateCapture" />   </message>- <message name="updateCaptureResponse">  <part name="parameters" element="tns:updateCaptureResponse" />   </message>- <portType name="MobileUsersWebService">- <operation name="updateMobilePassword">  <input message="tns:updateMobilePassword" />   <output message="tns:updateMobilePasswordResponse" />   </operation>- <operation name="getMobileUsersList">  <input message="tns:getMobileUsersList" />   <output message="tns:getMobileUsersListResponse" />   </operation>- <operation name="updateCapture">  <input message="tns:updateCapture" />   <output message="tns:updateCaptureResponse" />   </operation>  </portType>- <binding name="MobileUsersWebServicePortBinding" type="tns:MobileUsersWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="updateMobilePassword">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="getMobileUsersList">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="updateCapture">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="MobileUsersWebServiceService">- <port name="MobileUsersWebServicePort" binding="tns:MobileUsersWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/MobileUsersWebService" />   </port>  </service>  </definitions>15.8 PNCWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://pnc.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://pnc.ws.bof2.anite.com/" name="PNCWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://pnc.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/PNCWebService?xsd=1" />   </xsd:schema>  </types>- <message name="pingPNC">  <part name="parameters" element="tns:pingPNC" />   </message>- <message name="pingPNCResponse">  <part name="parameters" element="tns:pingPNCResponse" />   </message>- <message name="manualCheck">  <part name="parameters" element="tns:manualCheck" />   </message>- <message name="manualCheckResponse">  <part name="parameters" element="tns:manualCheckResponse" />   </message>- <message name="fastTrackResponses">  <part name="parameters" element="tns:fastTrackResponses" />   </message>- <message name="fastTrackResponsesResponse">  <part name="parameters" element="tns:fastTrackResponsesResponse" />   </message>- <portType name="PNCWebService">- <operation name="pingPNC">  <input message="tns:pingPNC" />   <output message="tns:pingPNCResponse" />   </operation>- <operation name="manualCheck">  <input message="tns:manualCheck" />   <output message="tns:manualCheckResponse" />   </operation>- <operation name="fastTrackResponses">  <input message="tns:fastTrackResponses" />   <output message="tns:fastTrackResponsesResponse" />   </operation>  </portType>- <binding name="PNCWebServicePortBinding" type="tns:PNCWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="pingPNC">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="manualCheck">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>- <operation name="fastTrackResponses">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="PNCWebServiceService">- <port name="PNCWebServicePort" binding="tns:PNCWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/PNCWebService" />   </port>  </service>  </definitions>15.9 CallOnHitWebService  <?xml version="1.0" encoding="UTF-8" ?> - <definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://callonhit.ws.bof2.anite.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://callonhit.ws.bof2.anite.com/" name="CallOnHitWebServiceService">- <types>- <xsd:schema>  <xsd:import namespace="http://callonhit.ws.bof2.anite.com/" schemaLocation="http://localhost:8081/bof2/webservices/CallOnHitWebService?xsd=1" />   </xsd:schema>  </types>- <message name="wsRequestImages">  <part name="parameters" element="tns:wsRequestImages" />   </message>- <message name="wsRequestImagesResponse">  <part name="parameters" element="tns:wsRequestImagesResponse" />   </message>- <portType name="CallOnHitWebService">- <operation name="wsRequestImages">  <input message="tns:wsRequestImages" />   <output message="tns:wsRequestImagesResponse" />   </operation>  </portType>- <binding name="CallOnHitWebServicePortBinding" type="tns:CallOnHitWebService">  <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /> - <operation name="wsRequestImages">  <soap:operation soapAction="" /> - <input>  <soap:body use="literal" />   </input>- <output>  <soap:body use="literal" />   </output>  </operation>  </binding>- <service name="CallOnHitWebServiceService">- <port name="CallOnHitWebServicePort" binding="tns:CallOnHitWebServicePortBinding">  <soap:address location="http://localhost:8081/bof2/webservices/CallOnHitWebService" />   </port>  </service>  </definitions>16 Appendix – Version 2.2This section forward comprises the original web services document information for BOF release 2.2These appendices describe the interfaces BOF 2.2 provides for connecting to other BOFs and to source equipment for the transfer of information.  BOF 2.2 has been designed to use web services to facilitate the interconnection of other ANPR and non-ANPR systems, such as force intelligence systems (FIS) and Geographical Information Systems (GIS).  Data flows and high level interfaces are portrayed in diagrams and detailed web service and Web Service Description Language (WSDL) definitions are provided.Prior to the implementation of web services within the BOF, Scarab represented the principal interface between the BOF and third party ANPR units. It is intended that web services interfaces replace Scarab, and Scarab be retired from operational use.Furthermore, it is intended that the web services associated with BOF 2.2 and described in this document be replaced by a rationalised set providing equivalent functionality. The new set of web services will be more closely aligned with the principles and requirements of ISS4PS.The rest of this document is organised as follows:Chapters 17 and 18 give an overview of ANPR data flows and the web services that implement them.Chapter 19 onwards describes each web service in detail.Error codes are listed in Chapter 26.Chapter 27 contains important information about throttling the data feed to the BOF. All systems feeding data to the BOF should adhere to the algorithm described.WSDL definitions for each web service are contained in Chapter 28.17 Appendix - Web Services for 2.2For one force to discover another over CJX, a manual process exists whereby the web address of a force needs to be entered against an “External System” – a term used on BOF 2 to describe the details of another BOF or device that understands the web services API. To enable inter-BOF communication there is a requirement for each force firewall configuration to open ports (usually 8081, but configurable) for inter-BOF communication via CJX. At present there is no solution to provide automatic discovery of other BOFs.17.1 Overview of OperationFrom the setup of “External Systems”, cross regional searching of reads (see 19.12), cross regional hotlist sharing (see 4.7) and remote alarms (see 19.10) can all be achieved. There is also a requirement for recognition units that feed capture information into the BOF to hold their own local supply of hotlist intelligence, especially during periods of downtime where the device is unable to achieve connection with the BOF. The BOF is able automatically to store “revisions” for each piece of intelligence that a device holds, such that when connection is resumed a patch of updates and deletes can be issued automatically to ensure consistency and reliability of intelligence matching (See 19.5).17.2 Data FlowsThe following diagram illustrates the data that is passed into and out of the BOF 2 web server. The data flows are essentially “inherited” from the architecture that was put in place during the development and rollout of BOF I. As ANPR has become more successful, more and more data is passed around, at greater frequency, to and from an increasing number of locations (especially mobile units).The existing mechanisms for passing this data around are based primarily on a file interface. Various processes monitor specific folders and when a new file arrives in that folder, the process reads it, processes it and then removes the file from the folder. Likewise, if a file needs to be passed to an external system, the file is written to the file system, where a process reads, processes and removes the file after the transaction is complete.Figure 1  Data Flows around BOF 2The volume of data flowing into and out of BOF I has increased substantially over the lifetime of the product. BOF 2 will accommodate these increased data flows. What BOF 2 offers in addition is the ability for third parties to pass information using a variety of web services. Likewise, third parties can receive asynchronous updates of information from BOF 2. An example web service may be the ability of an ANPR device (e.g. a Petards in-car camera unit) to pass reads via a web service call instead of writing files to the local Petards system for subsequent passing to the BOF 2 file system using Scarab. A second example may be the ability of a force intelligence system to construct a hotlist and then pass that hotlist to BOF 2. BOF 2 can then match reads against this hotlist, and the force intelligence system can be notified when a match occurs. At a later date it can extract all matches against that hotlist for further intelligence analysis.  Providing forces enable the infrastructure and give the appropriate permissions, an intelligence system could lodge hotlists on local and remote BOF installations.18 Appendix - Web Service Overview and Platform for 2.218.1 OverviewThis section briefly describes the various message classes that will be used to define what passes between Mobile Units and the Force BOF, and from BOF to BOF. The following diagram summarises the web services available between the various outlying systems and BOF 2.Figure 2  High Level Interfaces18.2 Web Service PlatformBOF 2 utilises the Apache Axis framework for web services support. Axis uses SOAP (Simple Object Access Protocol) as the underlying protocol. Developing the client end of the web service is extremely easy using Axis and the method signatures on the server. The method signatures as defined on the BOF 2 server are separated into sections to help facilitate the building of the client side of the web service.18.3 SecurityDepending on the method of communication between the BOF and a remote system, a force may insist that data passing across the link be encrypted. Encryption is implemented in BOF 2.2 using SSL. If required to do so, third-party systems must ensure that they are using the correct protocol (https, as opposed to http), are communicating on the right port, and have a client certificate correctly installed. All web services support SSL with the exception of those listed in the table in Section 3.4.For further information about the BOF 2.2 SSL implementation and the implications for connecting devices, please see the BOF 2.2 SSL Integration document.18.4 Multi-server architectureBOF 2 is implemented on a multi-server architecture. Most forces employ a two-server model:1. web server, which handles interaction with user workstations and other ANPR systems2. database server, for data storage.Occasionally, the web server and database server may be combined. However, for both the single and two-server models, all web service calls should be directed to the web server.Forces may, if they wish, employ a three-server model:1. web server, which handles interactions with user workstations and also communicates hotlist and other data to ANPR systems2. matching server, which accepts reads and images from ANPR systems3. database server, for data storage.If a three-server model is implemented then web service calls should be directed either to the web server or to the matching server in accordance with the table in Section 19.19 Appendix - Web Service Definitions for 2.2Each Web Service is shown with its associated method or methods.  For example, below is the InputCapture web service and an associated method sendCapture.The following table indicates to which server web service calls should be made if a three-server BOF is implemented, and also whether the web service supports SSL or not (see sections above for further notes on BOF security and multi-platform architectures). If a one or two-server BOF is in place, all calls should be directed to the web server.Web ServiceWeb serverMatching serverSSLInputCaptureWebService??InputBinaryCaptureDataWebService??InputCompactCaptureWebService??InputCompoundCaptureWebService??GetHotlistRepoStatusService??GetHotlistStatusService??SetHotlistStatusService??GetHotlistUpdatesRestrictSizeService??PNCManualCheckWebService??CreateHotlistWebService??DeleteHotlistWebService??AlertWebService??QuickCheckWebService?SearchWebService?GetCaptureImageWebService?PNCStatusWebService??PNCFastTrackResponsesWebService??PingWebService?MobileUsersWebService??UpdateFilesService??RemotelyInstalledHotlistWebService??20 Appendix - Functional Area: File Operations20.1 Get File Repository StatusThis web service gets the current revision number for the file repository. The file repository revision number is incremented on every change to an included file.The web service name is : UpdateFilesService (WSDL see 22.21).The Java method signature for the service is shown below.public long getRepoStatus(	String signature, 	String username,	String sourceId,	long revNumber)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdentifierString255The locationID/sourceIdentifier of the mobile unit.Revision NumberlongThe last revision number the mobile updated against.The return value is the current version number of the repository, or -1 if there are no changes since the last update.20.2 Get File Status As StringThis web service gets the current revision number for the file. The file revision number is incremented on every change to the file.The web service name is : UpdateFilesService (WSDL see 22.21).The Java method signature for the service is shown below.public String[] getFileStatusAsString(		String signature, 	String username,	String sourceIdentifier)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdentifierString255The locationID/sourceIdentifier of the mobile unit.The return value is an array of Strings, one String representing details for each updated file. The String value is a concatenation of the following java signatures from BofFileRevision. public java.lang.String getExternalSystemRevision()public java.lang.String getFileName()public java.lang.String.getLatestRevision()20.3 Get File StatusThis web service gets the current revision number for the file. The file revision number is incremented on every change to the file.The web service name is : UpdateFilesService (WSDL see 22.21).The Java method signature for the service is shown below.public BofFileRevision[] getFileStatus(	String signature, 	String username,	String sourceIdentifier)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdentifierString255The locationID/sourceIdentifier of the mobile unit.The return value is an array of BofFileRevision objects, one object for each updated file. The java signatures for the useful methods on these objects are as follows:-public java.lang.String getExternalSystemRevision()public java.lang.String getFileName()public java.lang.String getLatestRevision()	20.4 Get File SHA1 HashThis web service gets the Base64 encoded SHA1 hash of the file. This web service is designed to allow users to check the integrity of a downloaded file by comparing a locally computed hash against the hash stored on the BOF 2 system.The web service name is : UpdateFilesService (WSDL see 22.21).The Java method signature for the service is shown below.public String getFileSHA1Hashsum (	String signature, 	String username,	String filename,	long revNumber)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.FilenameString255The name of the file.Revision NumberlongThe revision number of the file.The Java method signature for the service is shown below. The return value is the Base 64 encoded SHA1 hash of the file contents.20.5 Get File DatablockThis web service gets a block of data from the file.  This web service is designed to allow users to retrieve a file in reasonable sized chunks. By requesting a chunk at a time the network is not tied up with one long request which effectively blocks other use. The web service name is : UpdateFilesService (WSDL seepublic BofFileDatablock getFileDatablock(	String signature,	String username,	String sourceId,	String fileName,  	long version, 	long offset, 	int blockSize)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdString255The Location/Source id of the mobile unit.FilenameString255The name of the file.Revision NumberlongThe revision number of the file.OffsetlongThe offset from the start of the file for the start of the block required.BlocksizeintThe number of bytes to retrieve.The object returned is a BofFileDatablock object.Useful methods are as follows: -public byte[] getDataBlock()public boolean isLastBlock()public int getNrBytesRead()21 Appendix - Functional Area: Input21.1 sendCaptureThis is the web service that allows a mobile unit to send a read object to BOF 2. It is also available for third party systems to pass on their reads to BOF 2. The read data that is sent may optionally contain images. However, if bandwidth between the mobile unit and BOF 2 is limited, the read object may be passed without any images. However, this is most efficiently achieved using the send compact read or send compound read web service calls listed below. When connectivity allows (or, for example, when the mobile unit is connected via a LAN connection), the images that have not been sent can be passed into BOF 2 using the Send Image web service also described below.The web service name is InputCaptureWebService (WSDL see 22.2).The Java method signature for the service is shown below.public final String sendCapture(	String signatureOfSender, 	String username,	String vrm, 		Short feedIdentifier, 		Short sourceIdentifier,	Short cameraIdentifier, 	byte[] plateJpegImage,	byte[] overviewJpegImage, 	Date captureTime, 	Float latitude,	Float longitude, 	Short cameraPresetPosition, 	String cameraPan,	String cameraTilt, 	String cameraZoom, 	Byte confidencePercentage,	Boolean motionTowardCamera) throws RemoteException ;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringunlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.VrmString10Vehicle Registration Mark - requiredfeedIdentifierShortUsually the Force PNC CodesourceIdentifierShortUnique id for this Recognition DevicecameraIdentifierShortId for the camera that sent the readplateJpegImagebyte[]unlimitedOptional. Can be sent lateroverviewJpegImagebyte[]unlimitedOptional. Can be sent latercaptureTimeDateDate that the capture was recorded by the camera. latitudeFloatPosition of the camera - latitudelongitudeFloatPosition of the camera - longitudecameraPresetPositionShortCamera presetcameraPanString20cameraTiltString20cameraZoomString20confidencePercentageByte1-100motionTowardCameraBooleanDefault to True if the vehicle is coming towards the camera.    The web service sends back a String, which is a unique reference to the read if the read was validated correctly and the read was successfully saved in the BOF 2 database. If there was a problem, a remote exception would be raised and sent. In Scarab, the textual part and images of a read are processed and passed in to BOF 2 with the InputCaptureWebService call when connected via LAN. The textual data is taken from the .spl file. E.g.00050001000120040323205733I075GUN.SPLThe name of the file contains enough information to populate thefeedIdentifier (first 4 bytes)sourceIdentifier(4 bytes)cameraIdentifier(4 bytes)captureDate(YYYYMMDDHHMISS) VRM (remainder)parts of the web service message. The contents of the file are used to populate the Confidence, GPS location and UserName.  The latitude and longitude of a read are represented as floats within the system.  Thus co-ordinates of N51:31:18, W0:37:36 (Anite, Slough) will be represented in the system as derived from following formule:Working the latitude first, latMultiplier = 1 if first letter is ‘N’ else –1 (representing S)latDegrees= 51 * 60 = 3060latMinutes= 31 latSeconds = 18 / 60 = 0.30latFloat=latMultiplier * (latDegrees + latMinutes+ latSeconds)	= 1 * (3060 + 31 + 0.30)	= 3091.3Similarily, longitude will be calculated in the same manner: lngMultiplier= 1 if first letter is ‘E’ else –1 (representing W) lngDegrees= 0 * 60 = 0lngMinutes= 37 lngSeconds= 36 / 60 = 0.60lngFloat= lngMultiplier *( lngDegrees +lngMinutes+ lngSeconds)	 = -1 * (0 + 37 + 0.60)	 = -37.6Scarab sets the following parameters to null: cameraPancameraTiltcameraZoommotionTowardsCameraThis is due to the information not being part of the file interface specification. Obviously it is expected that the values are set directly by the third party web service solution, if possible.The binary image files with extension .OVR (Overviews) or .JPG (Plate Images) with the same base name are located and added to this web call.Since the file itself is created by the plate reader, the plate reader could create a web  service call containing the appropriate information without having to write out a file to disk (always a time-consuming activity).21.2 sendImageDue to bandwidth limitations over GSM and GPRS, it is possible that images need to be written to BOF 2 some time after the textual data for the read has been provided.  This web service allows an image to be sent either before or after a read. The web service contains enough information so that BOF 2 can associate the textual information for the read sent using the sendCapture, sendCompactCapture or sendCompoundCapture messages with a previously-sent image.The web service name is InputBinaryDataWebService (WSDL see 22.3).The Java method signature for the service is shown below.public final String addBinaryCaptureData (	String signature,	String username,             	String vrm,             	Short feedIdentifier,             	Short sourceIdentifier,           	Short cameraIdentifier,             	Date captureTime,            	byte[] binaryImage,	String binaryDataType)	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatueStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.VrmString10Vehicle Registration Mark - requiredfeedIdentifierShortUsually the Force PNC CodesourceIdentifierShortUnique id for this Recognition DevicecameraIdentifierShortId for the camera that sent the readcaptureTimeDateDate that the capture was recorded by the camera. binaryImagebyte[]UnlimitedBinaryDataType String1‘P’ = plate image, ‘O’ = Overview imageThe web service sends back the VRM if the image was processed and the binary data (image) was successfully saved. If there was a problem, an exception is raised and returned. 21.3  Send Compact ReadThe SOAP protocol is a very expressive protocol, where every parameter that is passed is defined rigorously using XML. In the ‘Send Read’ web service definition, every parameter that is to be sent (including null values) would have a set of matching XML keys. All of this vocabulary makes the message human-readable.However, bandwidth on GSM and GPRS networks is very low, and all this expressive vocabulary is extra data to be sent. Therefore a ‘compact’ web service has been developed to allow mobile units to pass in plate reads faster and more efficiently. Instead of breaking out each parameter into its own field in the SOAP message, a single delimited string is passed.Note: for sending more than one capture at a time the Send Compound Reads Web service is more efficient, this is described below. It is intended that compact and compound read calls are used together dependent on the amount of textual capture information to be sent to BOF 2.The web service name is InputCompactCaptureWebService (WSDL see 22.4).The Java method signature for the service is shown below.public final String sendCompactCapture(	String capture) 	throws RemoteExceptionThe data that is sent is defined below. Attribute NameJava typeMax SizeDescriptioncaptureStringunlimitedDelimited version of ‘Send Read’ web service. The delimiter is a vertical pipe character followed by a space (“| ”). Please ensure that any null fields are delimited in this way.The order of the delimited values is shown below.Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringunlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.VrmString10Vehicle Registration Mark - requiredfeedIdentifierShortUsually the Force PNC CodesourceIdentifierShortUnique id for this Recognition DevicecameraIdentifierShortId for the camera that sent the readcaptureDateLongDate that the capture was recorded by the camera.  The date is expressed as a long integer representing milliseconds since January 1, 1970, 00:00:00 GMT latitudeFloatPosition of the camera - latitudelongitudeFloatPosition of the camera - longitudecameraPresetPositionShortCamera presetcameraPanString20cameraTiltString20cameraZoomString20confidencePercentageByte1-100motionTowardCameraBooleanDefault to True if the vehicle is coming towards the camera. The web service sends back a unique reference to the read if the read was processed and inserted correctly. 21.4 Send Compound ReadsIf a mobile unit has been offline for a period of time, a backlog of reads might have built up. These need to be transferred into the BOF 2 as quickly as possible when connectivity is established. To establish this, an extension of the ‘Send Compact Read’ web service has been built that allows multiple delimited strings to be passed as an array into BOF 2. The maximum number of reads that can be sent per message is 50.The web service name is InputCompoundCaptureWebService (WSDL see 22.5).The Java method signature for the service is shown below.public final String sendCompoundCapture(	String[] captures) 	throws RemoteExceptionThe data that is sent is defined below.Attribute NameJava typeMax SizeDescriptioncapturesString[]unlimitedAn array of delimited Strings. Each string is the same as ‘Send Read’ web service. The delimiter is a vertical pipe character (“| ”). Please ensure that any null fields are delimited in this way.The web service reflects back an array of unique references to the read if the read validated correctly. If one or more of the captures in the compound array does not get inserted into BOF 2 for whatever reason, the element in the array that is returned is set to “ERROR” for the erroneous capture. For example, if 50 captures are passed in and captures 23, 34 and 37 produce an error, the array that comes back will have 50 elements, each containing a unique reference to the inserted capture. However, elements 23, 34 and 37 will contain the “ERROR” string.22 Appendix - Functional Area: Hotlists 22.1 Hotlist Update PollThe web service name is GetHotlistRepoStatusService (WSDL see  22.6).The Java method signature for the service is shown below.public final Long getRepoStatus (	String signatureOfSender,	String username,	String sourceID	long   revNumber) 	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.sourceIDStringThe ID for the location (fixed or mobile) that is receiving the hotlists.revNumberLongThe last checked revision number the location is at, as was previously returned by this call.This call returns the revision number to update to or -1 if there is no need to update. This call should be used as a quick poll to find if there are any updates to collect. The revision number returned may sometimes be the same as the previously returned revision number (instead of -1 or an increased number). This would indicate an update is required but this has occurred because of a change of allocation of hotlists without a change to the hotlist files themselves.22.2 Get Hotlist StatusThis web service is provided to allow a remote mobile unit to fetch a list of hotlist names to which it is allowed to have access. For example, a car may be on a special operation. When the car connects to BOF 2, the source ID associated with the car (set in the mobileScarab.properties file) is passed to BOF 2, and a list of hotlists are returned that are associated with that car at that time.The web service name is GetHotlistStatusService (WSDL see 22.7).The Java method signature for the service is shown below.public final BofHotlistRevisions[] getHotlistStatus(	String signatureOfSender,	String username,	String sourceId)	throws RemoteException; The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.sourceIDStringThe ID for the location (fixed or mobile) that is receiving the hotlists.This call is used to obtain what BOF 2 believes the status is of each hotlist on the PRU and the latest revision of each hotlist allocated to the PRU by BOF 2.The returned object bofHotlistRevisions can be described as follows:Attribute NameJava typeMax SizeDescriptionextenalSystemRevisionStringUnlimitedThe revision BOF 2 thinks the remote system has currently got for this hotlist.hotlistNameString255Name of the hotlistlatestRevisionStringUnlimitedThe latest revision of the hotlist available to this unit.It is intended that the status of hotlists be stored on the PRU and checked against the results returned by this call. If the “externalSystemRevision” is not correct it should send the correct revision that it holds for the hotlist using the “setHotlistStatus” Web service call prior to updating the hotlist (this information is used on the BOF to decide whether an update is required due to hotlist allocation changes). The data is also used to display the current status of hotlists on each PRU to BOF 2 users. If the “externalSystem” revision reflects the revision held by the PRU, it can then compare its revision with the “latestRevision” sent. If the “latestRevision” is -1 or null then the hotlist should be removed from the PRU as it is has been removed or de-assigned at the BOF 2 end. Similarly, if the PRU does not have a hotlist that is listed the “setHotlistStatus” web call should be called with the “currentRevision” set to -1 to inform the BOF the hotlist is deleted on the PRU. Finally, the PRU should check that it does not have any hotlists that are not in the array. These are hotlists which are not allocated to the PRU from BOF 2 and so should be removed.22.3 Set Hotlist StatusWhen the hotlist status on the PRU is changed or is identified as being out of sync with the BOF’s status for that PRU, the set hotlist Status call should be invoked. It is important to keep the status on BOF 2 up to date so a user can see what the state of hotlists is from the BOF 2 system and BOF 2 can subsequently identify updates. The status of one or many of hotlists can be set in one call as the hotlists in the array are updated exclusively.The web service name is SetHotlistStatusService (WSDL see 22.8).public final void setHotlistStatus(	String signatureOfSender,	String username,	String sourceId,	ExternalHotlistRevisions[] hotlistsAndRevisions)	throws RemoteException; Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.sourceIDStringThe ID for the location (fixed or mobile) that is receiving the hotlists.ExternalHotlistRevisionsArrayAn array of external hotlist revisions as listed belowThe ExternalHotlistRevisions object can be described as follows:Attribute NameJava typeMax SizeDescriptionhotlistNameString255Name of the hotlistcurrentRevisionStringUnlimitedThe current revision of the hotlist on the recognition unit.22.4  Get Hotlist UpdateOnce the status of all hotlists has been compared, the PRU knows which hotlists it needs to update and can proceed to call the get hotlist update restricted size call on each.The web service name is GetHotlistsUpdatesRestrictedSizeService (WSDL see 7.8).public BofHotlistData getHotlistUpdatesRestrictSize (	String signatureOfSender,	String username,	String sourceId,	String hotlistName,	int size)	throws RemoteException; Attribute NameJava typeMax SizeDescriptionsignatureOfSenderStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the read.sourceIdString10The ID for the location (fixed or mobile) that is receiving the hotlists.hotlistNameString100Name of the hotlist to be updatedsizeintMaximum size of update to send. If the compressed hotlist updates are too big a BOF 2HotlistData object with no data and the “toobig” flag set to true will be returned.The return from this call is a BofHotlistData object:Attribute NameJava typeMax SizeDescriptionisFileTooBigboolean-Flag indicating whether the hotlist deltas are to large to return.hotlistDeltasbyte[]maxSize passed to call A zip file containing the updates for this hotlist.hotlistNameString100Name of the hotlist to be updatedlatestRevisionStringThe revision that this update representsThe hotlist revision details for the PRU are taken from the BOF 2 status information synchronised in the earlier calls and the changes from that revision to the current revision are produced for this mobile unit. The latestRevision for this update is returned in the BofHotlistData object. This should be used to update the PRU’s status once the data has been successfully processed. The zip file in hotlistDeltas will contain either a delete and insert delta file (in that order) or a replace file, depending on which is smallest. The name of the file in the zip in each case will be as follows.Replace File:[cameragroupname]_[HotlistName]_R.datorDelete File: [cameragroupname]_[HotlistName]_D.datInsert File: [cameragroupname]_[HotlistName]_I.datThe files will be comma separated data lines in the 13-column format as follows:FieldMax SizeRequiredOptionsDescriptionVRM10YFree-TextNumber plate of vehicle eg.RV04ABCVehicle Make30 NFree-TextMake of vehicle: eg. FordVehicle Model30NFree-TextModel of vehicle: eg. EscortVehicle Colour30NFree-TextColour of vehicle: eg. BlackAction254NSTOPSILENTINTELLNO_ALERTAction to be taken on hit: this may be one or more of the valid options delimited by colon ‘:’ eg. STOP:INTELLWarning Markers254NNOTHING KNOWNFIREARMSWEAPONSVIOLENTFTSWarnings for stopping vehicle: this may be one or more of the valid options delimited by colon ‘:’ eg. FIREARMS:VIOLENTReason254NDRUGSCRIMEDISQDOCSDRINKDRIVEDRUGDRIVESEXUALPROTESTReasons for stopping vehicle: this may be one or more of the valid options delimited by colon ‘:’ eg. DRUG:DRUGDRIVENIM (5x5x5) Code10NFree-text3 character 5x5x5 NIM code for dataeg. A14Information /Action20000NFree-TextNotes about the vehicleForce & Area2000NFree-TextDate50NValid dateDate in the format: dd-MM-yyyy HH:mm:ssPNC ID10NFree-TextPNC record reference IDGPMS Marking254NConfidentialRestrictedSecretUnclassifiedTop SecretOne and only one of the optionsShould the update create an update greater than the max Size the “isFileTooBig” Boolean value in the BofHotlistData object will be set to true and no data will be returned in the hotlistDeltas attribute. If this occurs it is intended that the PRU does not attempt an update on this hotlist until the system is connected by a higher bandwidth connection.Note: It is likely that this call may take some time especially over slower connections. For this reason web calls should have a relatively high timeout period of 5-10mins.22.5 Create HotlistThis web service is used to transfer a hotlist from one BOF to another over CJX. The web service name is CreateHotlistWebService (WSDL see 22.11).The Java method signature for the service is shown below.public String createOrUpdateHotlist (	String signature,             	String hotlistName,            	String gpms,            	Integer pncId,            	int systemId,            	String remoteHotlistRef,	Integer sequenceNumber,	String[] hotlistEntries)            	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. hotlistNameString255The name of the hotlist that is being transferred. At the receiving end, the hotlist name is prepended with the PNC ID and system ID of the sending system. For example, if the hotlist called ‘MyHotlist’ is sent from Northants, system number 1 (default), the hotlist name on the receiving BOF is set to ‘34_1_MyHotlist’GpmsString20The textual representation of the GPMS marking associated with this hotlist. This affects the visibility of the hotlist on the receiving end. Valid values are: UnclassifiedConfidentialRestrictedSecretTop SecretpncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.systemIdIntegerThe identifying number of the sending BOF system. Larger police forces, for example, may have several BOF systems deployed. This field identifies the system within a force. Defaults to 1.remoteHotlistRefString30A unique reference to the hotlist on the sending system. sequenceNumberIntegerThe Hotlist entries are sent in batches, the first batch having a sequenceNumber of 0, with sequenceNumber incrementing by 1 for each subsequent batch.hotlistEntriesString[]An array of delimited strings that contain the intelligence on each vehicle in the hotlist. The order of the data in the delimited string that holds the intelligence for each vehicle in the hotlist is in the basic 13 column NAAS standard format detailed at 4.5.3. The delimiter is a vertical pipe character (“|”). All fields are optional except for the VRM. If a field is not supplied, a space must be placed between the delimiters.Because of bandwidth limitations and data integrity issues, it is recommended that a maximum of 100 hotlist entries are sent per message. If the source hotlist has more than 100 entries, then the same message can be sent as many times as required, each message containing a different String[] of entries. (Note that the java method is called ‘createOrUpdateHotlist’).If the message is successfully received and processed by the remote system, a unique reference number for the remote hotlist is returned. If there is an exception, a RemoteException is raised.22.6 Delete HotlistThis web service allows the sender to remove a previously sent hotlist and its entries from a remote BOF. The web service name is DeleteHotlistWebService (WSDL see 22.12).The Java method signature for the service is shown below.public String deleteHotlist(	String signature,             	String hotlistName,            	Integer pncId,            	Integer systemId,            	String remoteHotlistRef)            	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. hotlistNameString100The name of the hotlist that is being deleted. At the receiving end, the hotlist name is prepended with the PNC ID and system ID of the sending system. For example, if the hotlist called ‘MyHotlist’ is sent from Northants, system number 1 (default), the hotlist name on the receiving BOF is referred to  as ‘34_1_MyHotlist’pncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.systemIdIntegerThe identifying number of the sending system. Larger police forces, for example, may have several BOF systems deployed. This field identifies the system within a force. Defaults to 1.remoteHotlistRefString30A unique reference to the hotlist on the sending system. The web service returns the unique reference to the remote hotlist.22.7 List All HotlistsThis web service sends the names of all the hotlists that are loaded on the source system.   This web service is designed to allow central management of the hotlists held on a remote system by regularly sending a complete list of hotlists held on the rmote system to the bof.  The hotlist names sent should include all the hotlists held locally including bulk hotlists, hotlists loaded from the bof and any hotlists loaded directly at the remote unit by using a CD or USB storage key or similar device.The web service name is: RemotelyInstalledHotlistWebService (WSDL see 22.22).The Java method signature for the service is shown below.public void listAllHotlists(	String signature,	String username,	int sourceId,	String[] hotlistNames)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdint-The Location/Source id of the mobile unit.hotlistNamesString[]255[unlimited]The name of the hotlist.22.8 Get Hotlists to RemoveThis web service retrieves a list of the names of hotlists that the bof believes are loaded on the source system and which have been marked by an administrator as ‘must be removed’.   This web service is designed to allow central management of the hotlists held on a remote system by using List All Hotlists web service to find out what hotlists are loaded on the given source system and by using this sevice to provide a list of those hotlists that the administrator wants removed from the system. The web service name is : RemotelyInstalledHotlistWebService (WSDL see 22.22).The Java method signature for the service is shown below.public String[] getHotlistsToRemove (	String signature,	String username,	int sourceId)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.SourceIdint-The Location/Source id of the mobile unit.The service returns an array of String objects representing the names of the hotlists that must be removed from the remote system.23 Appendix - Functional Area: Mobile User23.1 Mobile Users detailsThis web service allows mobile units to retrieve a current list of the login names, permissions and encrypted passwords for all users whose BOF 2 user record is marked with the mobile user flag and allows a user to change the mobile password associated with their account. The web service name is : MobileUsersWebService (WSDL see 22.20).The Java method signature for the service is shown below.public String getMobileUsersList(	String signature, 	String username)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.The method returns a String of data formatted as xml an example of which is as follows:-Notes:1. Version refers to the version of the file format, not the data itself.2. There will be a <mobileUser> tag for each mobile user on the BOF 2 system. To mark a user as a mobile user there is a checkbox on the user details screen. 3. The encrypted password is the Base64 encoded MD5 hash of the users ‘mobile’ password. See notes in section 4.17.4. Three permissions are defined for the mobile user, as shown in the example above. These permissions my be granted and revoked by an administrator on the BOF 2 system. The rights granted by use of these permissions are not defined by the BOF 2 system and are for the use of the remote systems.23.2 Mobile User Password ChangeThis web service allows the remote user to change their mobile password. The web service name is : MobileUsersWebService (WSDL see 22.20).The Java method signature for the service is shown below.public void updateMobilePassword(	String signature, 	String username,	String password)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. UsernameString32Login name of user on mobile unit operating the camera. Logged against the request.PasswordString255The new passwordIMPORTANT NOTES1. The mobile user must be a user with an account on the BOF 2 system. Such a user will have 2 passwords, their main BOF 2 login password (system password) and their mobile password. When the system password is changed at a BOF 2 terminal, then both the system and mobile passwords will be changed. However, when a user changes their password remotely from a mobile unit, only the mobile password is changed. In addition, after a remote password change a flag is set to force the user to change their system password at next login from a BOF 2 terminal.2. The user’s new mobile password will be whatever password has been allowed by the mobile system. We would envisage that all mobile systems will enforce compliance with appropriate Police Authority recommendations. However, the BOF 2 system will not enforce this, and will accept short passwords and even a blank password. IT IS THE MOBILE SYSTEM’S RESPONSIBILITY TO ENSURE THAT PASSWORDS ARE ADEQUATE.23.3 Match Response InformationThis web service allows a mobile user to enter details against a read that has been sent through the BOF 2 system.The web service name is: MobileUsersWebService (WSDL see 22.20).The Java method signature for the service is shown below.public void updateCapture (	String captureIdentifier, 	String text,	int code)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptioncaptureIdentifierString19The urn of the read to be updatedtextString255The response informationcodeint10The response code.Notes:1. The captureIdentifier is the ID sent back from web services allowing for the input of read data into the BOF 2 system.2. Any subsequent hits that have been generated by the read will also have the response information and code stored against them.24 Appendix - Functional Area: PNC24.1 Manual PNC CheckThis web service performs a full #VE check on the supplied VRM. The web service name is PNCManualCheckWebService (WSDL see 22.10).The Java method signature for the service is shown below.public Object manualCheck(	String signature, 	String username, 	Integer reasonCode,	String vrm, 	Short sourceId) 	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. reasonCodeIntegerA number between 1 and 7 that indicates the reason for the manual search. Defaults to 2 if not supplied. See below for descriptions of valid reason codes.vrmString10VRM upon which to perform a #VE checksourceIdShortThe ID for the location (fixed or mobile) that is receiving the hotlists.A valid PNC reason code must be supplied as part of this query. The following list summarises these reason codes.01 - Vehicle and/or person stopped, i.e. a street check.  This code would be used for property checks where the person stopped has property with them or in their vehicle.02 - Moving vehicle - used where the vehicle has just been seen but at the time of the check has not been stopped.03 - Abandoned or parked and unattended vehicle.  Would also be used where property has been found other than in the possession of a person.04 - Vehicles involved in a road traffic collision.  The Originator field would be used to record the location and/or the report reference if appropriate.05 - Subject of process or investigation, e.g. in custody.  The source document would be a custody record, process report or crime report.06 - Administration - for non-operational matters including security vetting, complainants, CTO/DSU/ASU or for intelligence.07 - Enquiries relating to family protection issues.08 - On behalf of other authorized agency.The web service returns back a byte[] that contains the output from the PNC for the supplied VRM. The output is a serialised version of the file that was created in BOF1 that was previously passed back to the mobile unit via a JMS queue. 24.2 PNC StatusThe PNC Status web service allows a mobile unit to check with BOF 2 as to whether the ‘FastTrack’ connection to the PNC is alive.The web service name is PNCStatusWebService (WSDL see 22.17).The Java method signature for the service is shown below .public Boolean pingPNC( 	String signature, 	String username) 	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the request.The web service returns a Boolean that indicates the current status of the PNC connection, as registered by BOF 2.24.3 PNC FastTrack ResponsesWhen a mobile unit passes captures into BOF 2 for matching against the PNC (and other hotlists), if there is a ‘FastTrack Response’ (FTR), a mechanism needs to be in place to return the FTR to the mobile unit. Previous versions of the software on the mobile unit used an outgoing queue from the BOF to the mobile unit (one per mobile unit), into which a FTR was placed if required. The outgoing queues have been abandoned as a feedback mechanism, replaced by this web service call. The sender effectively polls the BOF 2 system to see if there are any FTRs available for it.The web service name is PNCFastTrackResponsesWebService (WSDL see 22.18).The Java method signature for the service is shown below.public Object[] fastTrackResponses ( 	String signature, 	String username,	Integer sourceIdentifier) 	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. usernameString32Login name of user on mobile unit operating the camera. Logged against the request.sourceIdentifierIntegerThe source identifier for the fixed/mobile unit.The web service returns an array of FTRs to the requestor. Each element in the array is a byte[] representation of the FTR file that is created as part of the FastTrack matching process. 25 Appendix - Functional Area: Miscellaneous25.1 AlertWhen a hotlist that has been passed to a remote BOF matches against a capture in the remote forces area, an alert is raised, and this alert is passed back to the sending force for onwards dissemination. The alert message contains the capture details that are then run through the local matching processes as if the capture happened within the local force. The capture details that are sent back contain references to the system that reported the capture.The web service name is AlertWebService (WSDL see 22.13).The Java method signature for the service is shown below.public String alertForCapture(	Long sourceURN,             	Integer pncId,            	String capture)            	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsourceURNLongThe unique reference to the attached camera on the remote systempncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.captureStringUnlimitedA delimited version of the capture on the remote system.The delimited version of the capture is detailed in section 4.3 Send Compact Read. The capture is reconstructed into a capture object, and has the PNC ID and sourceURN added to it to indicate that the capture came from a remote system. The capture is then passed through the matching processes on the local machine, where the capture will be matched against all hotlists that have matching enabled.The web service returns a unique reference for the capture on the receiving system back to the sender.25.2 Quick CheckWhen performing a search, it is possible to pass the search parameters to remote systems. The quick check web service is meant to provide a simple yes or no answer as to whether the vehicle in the search has been captured on the remote system. The web service has been designed so that the user performing the search can choose which of the remote systems that report back should be used for a deeper search.The web service name is QuickCheckWebService (WSDL see 22.14)The Java method signature for the service is shown below.public Boolean quickCheck( 	String signature, 	Integer pncId,	String vrm,	Long startTime,	Long endTime)	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender.pncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.vrmString10The VRM to be searched. Wildcards are allowed, but not as the first character of the string.startTimeLongThe number of milliseconds since 1970 that represents the start date and time for the search endTimeLongThe number of milliseconds since 1970 that represents the end date and time for the search The web service call returns a Boolean to indicate whether the vehicle was captured on the remote system between the supplied dates. The details of the captures can be retrieved using the web service described in section “4.11 Search”.25.3 SearchThe search web service returns a list of captures for the supplied VRM between the specified dates. A maximum of 50 captures are returned.The web service name is SearchWebService (WSDL see 22.15).The Java method signature for the service is shown below.public String[] search(		String signature, 	Integer pncId,	String vrm,	Long startTime,	Long endTime,	Integer startRow)	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. pncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.VrmString10The VRM to be searched. Wildcards are allowed, but not as the first character of the string.startTimeLongThe number of milliseconds since 1970 that represents the start date and time for the search endTimeLongThe number of milliseconds since 1970 that represents the end date and time for the search startRowIntegerCurrently not used The web service returns an array of delimited capture strings. The format of this delimited string is described in section “4.3 Send Compact Read”.25.1 Get Capture ImageThe search web service described above does not return any images that are associated with the capture. If a specific capture that is returned is of interest, then the plate patch or overview image can be requested using this web service.The web service name is GetCaptureImageWebService (WSDL see 22.16).The Java method signature for the service is shown below.public byte[] getCaptureImage (			String signature, 	Integer pncId,	String vrm,	Long captureDate,	Long cameraUrn,	String type)	throws RemoteException;The data that is sent is defined below. Attribute NameJava typeMax SizeDescriptionSignatureStringUnlimitedPublic key of sender. pncIDIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42.vrmStringVRM relating to the image.captureDateLongThe time relating to the image.cameraURNLongThe camera URN relating to the image.TypeString1‘P’ = plate image, ‘O’ = Overview imageThe web service returns a byte[] that represents the raw image data.25.2 PingThis web service allows a BOF 2 administrator to ‘ping’ a remote BOF to ascertain whether it is alive or not.The web service name is PingWebService (WSDL see 22.19).The Java method signature for the service is shown below.public Boolean ping(	String signature, 	Integer sourcePncId)	throws RemoteException;The data that is sent is defined below.Attribute NameJava typeMax SizeDescriptionsignatureStringUnlimitedPublic key of sender. sourcePncIdIntegerThe unique number that is assigned to the sender by the PNC. E.g. Northampton Police = 34, Essex Police = 42. Used to log the ping request on the remote end.The web service returns ‘true’  if  the system is alive, or times out (from which it can be inferred that the remote system is either not responding, or there are networking or firewall issues between the sender and the remote system).26. Appendix - Interface Error Handling 2.2This section details the corrective actions required whenever an error condition is detected.  An error is generated by an exception being thrown to the calling application.When an exception is thrown, the textual error message may contain a code to define what the error is.  Various actions will need to be taken depending on this code.  The code shall comprise the first four character of the message (if available).Error CodeDescriptionAction0001System not readyWait for 1 minute0002System busyThrottle (Important - see section 27)0003Web services are presently disabledTry again later0004The system is in the wrong mode to accept this web service A web service request was sent to the wrong server in a multi server system0005The web service is unknown in the allow / disallow listThe wrong web service was called so correct and try again0006The web service must be called using SSLRecode your call to use SSL0010Invalid capture informationDo not resend this information.  May indictate a defect in the sending application0011Error when pinging system0012Error getting importable file names0013Error getting file data block0014Error getting file status0015Error getting repo status0016Error getting SHA1 hash sum0017Error adding hotlist entry0018createOrUpdateHotlist failed to create or update hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>0019createOrUpdateHotlist failed to update hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>0020createOrUpdateHotlist failed to create hotlist: <hotlistName> signature: <signature> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>0021createOrUpdateHotlist failed to add entries to hotlist<hotlistName> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId> seq: <sequenceNumber>0022createOrUpdateHotlist failed to add entries to hotlist<hotlistName> remote Hotlist Ref: <remoteHotlistRef> pncId:<pncId> systemId: <systemId>0023AlertWebService Error sending capture0024InputCaptureWebService Error sending capture0025Error processing matches0026Error getting Mobile users List0027Error updating Mobile password0028Error updating capture0029AlertWebService Error putting event on pushlet stack0030AlertWebService Error informing user about query completion0031Error pinging PNC connection0032Cannot perform manual PNC #ve check0033Cannot fetch FTRs for sourceIdentifier0034Error getting importable hotlist names0035Error getting hotlist updates for source ID <sourceID>0036Error getting hotlist status0037Error getting repo status for source ID <sourceID>0038Error setting hotlist status0039Error searching captures9999Internal ErrorReport to NorthgateNo codeInternal ErrorReport to Northgate27. Appendix - Throttling 2.2IMPORTANTThis throttling algorithm must be implemented as specified by all software utilizing BOF2 Web Services.  Failure to correctly implement this may cause slow operation / failure of the BOF2 system.1. If an error code of 0002 is reported then this indicates that the BOF 2 system is busy processing requests.   This usually occurs after a restart when a large number of captures are queued, ready to send.  The rules for throttling generate a variable delay between web service calls, which automatically limits the load on the BOF 2 system.2. The rules for throttling are as follows:3. If ANY web service from a connecting application receives a 0002 code, then ALL web services from that application are required to throttle.4. The initial delay before re-attempting a web service call is two seconds (the minimum retry delay).5. If a subsequent call also encounters a 0002 code then the delay before the next attempt shall be doubled unless the maximum limit has been reached.6. The maximum retry time limit shall be five minutes (three hundred seconds)7. If a subsequent call does not encounter a 0002 code then the delay before the next attempt shall be halved unless the minimum retry limit has been reached.8. If an application has a minimum retry delay (two seconds) and a subsequent call does not encounter a 0002 code then the delay before the next attempt shall be zero. (No throttling)28. Appendix - WSDL Definitions 2.2The following sections detail the full WSDL for each supported web service.28.2 InputCaptureWebService    <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/InputCaptureWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/InputCaptureWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/InputCaptureWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="sendCaptureResponse">  <wsdl:part name="sendCaptureReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="sendCaptureRequest">  <wsdl:part name="signatureOfSender" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="vrm" type="soapenc:string" />   <wsdl:part name="feedIdentifier" type="soapenc:short" />   <wsdl:part name="sourceIdentifier" type="soapenc:short" />   <wsdl:part name="cameraIdentifier" type="soapenc:short" />   <wsdl:part name="plateJpegImage" type="soapenc:base64Binary" />   <wsdl:part name="overviewJpegImage" type="soapenc:base64Binary" />   <wsdl:part name="captureTime" type="xsd:dateTime" />   <wsdl:part name="latitude" type="soapenc:float" />   <wsdl:part name="longitude" type="soapenc:float" />   <wsdl:part name="cameraPresetPosition" type="soapenc:short" />   <wsdl:part name="cameraPan" type="soapenc:string" />   <wsdl:part name="cameraTilt" type="soapenc:string" />   <wsdl:part name="cameraZoom" type="soapenc:string" />   <wsdl:part name="confidencePercentage" type="soapenc:byte" />   <wsdl:part name="motionTowardCamera" type="soapenc:boolean" />   </wsdl:message>- <wsdl:portType name="InputCaptureWebService">- <wsdl:operation name="sendCapture" parameterOrder="signatureOfSender username vrm feedIdentifier sourceIdentifier cameraIdentifier plateJpegImage overviewJpegImage captureTime latitude longitude cameraPresetPosition cameraPan cameraTilt cameraZoom confidencePercentage motionTowardCamera">  <wsdl:input message="impl:sendCaptureRequest" name="sendCaptureRequest" />   <wsdl:output message="impl:sendCaptureResponse" name="sendCaptureResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="InputCaptureWebServiceSoapBinding" type="impl:InputCaptureWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="sendCapture">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="sendCaptureRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://input.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="sendCaptureResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/InputCaptureWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="InputCaptureWebServiceService">- <wsdl:port binding="impl:InputCaptureWebServiceSoapBinding" name="InputCaptureWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/InputCaptureWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.3 InputBinaryCaptureDataWebService    <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/InputBinaryCaptureDataWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/InputBinaryCaptureDataWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/InputBinaryCaptureDataWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="addBinaryCaptureDataRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="vrm" type="soapenc:string" />   <wsdl:part name="feedIdentifier" type="soapenc:short" />   <wsdl:part name="sourceIdentifier" type="soapenc:short" />   <wsdl:part name="cameraIdentifier" type="soapenc:short" />   <wsdl:part name="captureTime" type="xsd:dateTime" />   <wsdl:part name="binaryImage" type="soapenc:base64Binary" />   <wsdl:part name="binaryDataType" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="addBinaryCaptureDataResponse">  <wsdl:part name="addBinaryCaptureDataReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="InputBinaryDataWebService">- <wsdl:operation name="addBinaryCaptureData" parameterOrder="signature username vrm feedIdentifier sourceIdentifier cameraIdentifier captureTime binaryImage binaryDataType">  <wsdl:input message="impl:addBinaryCaptureDataRequest" name="addBinaryCaptureDataRequest" />   <wsdl:output message="impl:addBinaryCaptureDataResponse" name="addBinaryCaptureDataResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="InputBinaryCaptureDataWebServiceSoapBinding" type="impl:InputBinaryDataWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="addBinaryCaptureData">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="addBinaryCaptureDataRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://input.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="addBinaryCaptureDataResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/InputBinaryCaptureDataWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="InputBinaryDataWebServiceService">- <wsdl:port binding="impl:InputBinaryCaptureDataWebServiceSoapBinding" name="InputBinaryCaptureDataWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/InputBinaryCaptureDataWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.4 InputCompactCaptureWebService  <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/InputCompactCaptureWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/InputCompactCaptureWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/InputCompactCaptureWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="sendCompactCaptureResponse">  <wsdl:part name="sendCompactCaptureReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="sendCompactCaptureRequest">  <wsdl:part name="capture" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="InputCaptureWebService">- <wsdl:operation name="sendCompactCapture" parameterOrder="capture">  <wsdl:input message="impl:sendCompactCaptureRequest" name="sendCompactCaptureRequest" />   <wsdl:output message="impl:sendCompactCaptureResponse" name="sendCompactCaptureResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="InputCompactCaptureWebServiceSoapBinding" type="impl:InputCaptureWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="sendCompactCapture">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="sendCompactCaptureRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://input.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="sendCompactCaptureResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/InputCompactCaptureWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="InputCaptureWebServiceService">- <wsdl:port binding="impl:InputCompactCaptureWebServiceSoapBinding" name="InputCompactCaptureWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/InputCompactCaptureWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.5 InputCompoundCaptureWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_soapenc_string">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="soapenc:string[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="sendCompoundCaptureRequest">  <wsdl:part name="captures" type="impl:ArrayOf_soapenc_string" />   </wsdl:message>- <wsdl:message name="sendCompoundCaptureResponse">  <wsdl:part name="sendCompoundCaptureReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="InputCaptureWebService">- <wsdl:operation name="sendCompoundCapture" parameterOrder="captures">  <wsdl:input message="impl:sendCompoundCaptureRequest" name="sendCompoundCaptureRequest" />   <wsdl:output message="impl:sendCompoundCaptureResponse" name="sendCompoundCaptureResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="InputCompoundCaptureWebServiceSoapBinding" type="impl:InputCaptureWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="sendCompoundCapture">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="sendCompoundCaptureRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://input.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="sendCompoundCaptureResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="InputCaptureWebServiceService">- <wsdl:port binding="impl:InputCompoundCaptureWebServiceSoapBinding" name="InputCompoundCaptureWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/InputCompoundCaptureWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.6 GetHotlistRepoStatusService  <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/GetHotlistRepoStatusService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/GetHotlistRepoStatusService" xmlns:intf="http://127.0.0.1:8081/bof2/services/GetHotlistRepoStatusService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="getRepoStatusRequest">  <wsdl:part name="signatureOfSender" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="sourceID" type="soapenc:string" />   <wsdl:part name="revNumber" type="xsd:long" />   </wsdl:message>- <wsdl:message name="getRepoStatusResponse">  <wsdl:part name="getRepoStatusReturn" type="xsd:long" />   </wsdl:message>- <wsdl:portType name="UpdateHotlistsService">- <wsdl:operation name="getRepoStatus" parameterOrder="signatureOfSender username sourceID revNumber">  <wsdl:input message="impl:getRepoStatusRequest" name="getRepoStatusRequest" />   <wsdl:output message="impl:getRepoStatusResponse" name="getRepoStatusResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="GetHotlistRepoStatusServiceSoapBinding" type="impl:UpdateHotlistsService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="getRepoStatus">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="getRepoStatusRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://scarab.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="getRepoStatusResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/GetHotlistRepoStatusService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="UpdateHotlistsServiceService">- <wsdl:port binding="impl:GetHotlistRepoStatusServiceSoapBinding" name="GetHotlistRepoStatusService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/GetHotlistRepoStatusService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.7 GetHotlistStatusService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" xmlns:intf="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns1="urn:GetHotlistStatusService" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="urn:GetHotlistStatusService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" />   <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="BofHotlistRevisions">- <sequence>  <element name="externalSystemRevision" nillable="true" type="soapenc:string" />   <element name="hotlistName" nillable="true" type="soapenc:string" />   <element name="latestRevision" nillable="true" type="soapenc:string" />   </sequence>  </complexType>  </schema>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="urn:GetHotlistStatusService" />   <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_tns1_BofHotlistRevisions">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:BofHotlistRevisions[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="getHotlistStatusRequest">  <wsdl:part name="signatureOfSender" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="sourceID" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="getHotlistStatusResponse">  <wsdl:part name="getHotlistStatusReturn" type="impl:ArrayOf_tns1_BofHotlistRevisions" />   </wsdl:message>- <wsdl:portType name="UpdateHotlistsService">- <wsdl:operation name="getHotlistStatus" parameterOrder="signatureOfSender username sourceID">  <wsdl:input message="impl:getHotlistStatusRequest" name="getHotlistStatusRequest" />   <wsdl:output message="impl:getHotlistStatusResponse" name="getHotlistStatusResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="GetHotlistStatusServiceSoapBinding" type="impl:UpdateHotlistsService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="getHotlistStatus">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="getHotlistStatusRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://scarab.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="getHotlistStatusResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="UpdateHotlistsServiceService">- <wsdl:port binding="impl:GetHotlistStatusServiceSoapBinding" name="GetHotlistStatusService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/GetHotlistStatusService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.8 SetHotlistStatusService  <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" xmlns:intf="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns1="urn:SetHotlistStatusService" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="urn:SetHotlistStatusService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" />   <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ExternalHotlistRevisions">- <sequence>  <element name="hotlistName" nillable="true" type="soapenc:string" />   <element name="revision" nillable="true" type="soapenc:string" />   </sequence>  </complexType>  </schema>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="urn:SetHotlistStatusService" />   <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_tns1_ExternalHotlistRevisions">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:ExternalHotlistRevisions[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>  <wsdl:message name="setHotlistStatusResponse" /> - <wsdl:message name="setHotlistStatusRequest">  <wsdl:part name="signatureOfSender" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="sourceID" type="soapenc:string" />   <wsdl:part name="hotlistsAndRevisions" type="impl:ArrayOf_tns1_ExternalHotlistRevisions" />   </wsdl:message>- <wsdl:portType name="UpdateHotlistsService">- <wsdl:operation name="setHotlistStatus" parameterOrder="signatureOfSender username sourceID hotlistsAndRevisions">  <wsdl:input message="impl:setHotlistStatusRequest" name="setHotlistStatusRequest" />   <wsdl:output message="impl:setHotlistStatusResponse" name="setHotlistStatusResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="SetHotlistStatusServiceSoapBinding" type="impl:UpdateHotlistsService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="setHotlistStatus">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="setHotlistStatusRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://scarab.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="setHotlistStatusResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="UpdateHotlistsServiceService">- <wsdl:port binding="impl:SetHotlistStatusServiceSoapBinding" name="SetHotlistStatusService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/SetHotlistStatusService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.9 GetHotlistUpdatesRestrictSizeService  <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/GetHotlistsUpdatesRestrictedSizeService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/GetHotlistsUpdatesRestrictedSizeService" xmlns:intf="http://127.0.0.1:8081/bof2/services/GetHotlistsUpdatesRestrictedSizeService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns1="http://getHotlistUpdatesRestrictSize" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="http://getHotlistUpdatesRestrictSize" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="BofHotlistData">- <sequence>  <element name="fileTooBig" type="xsd:boolean" />   <element name="hotlistDeltas" nillable="true" type="soapenc:base64Binary" />   <element name="hotlistName" nillable="true" type="soapenc:string" />   <element name="latestRevision" nillable="true" type="soapenc:string" />   </sequence>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="getHotlistUpdatesRestrictSizeResponse">  <wsdl:part name="getHotlistUpdatesRestrictSizeReturn" type="tns1:BofHotlistData" />   </wsdl:message>- <wsdl:message name="getHotlistUpdatesRestrictSizeRequest">  <wsdl:part name="signature" type="xsd:string" />   <wsdl:part name="userName" type="xsd:string" />   <wsdl:part name="sourceId" type="xsd:string" />   <wsdl:part name="hotlistName" type="xsd:string" />   <wsdl:part name="size" type="xsd:int" />   </wsdl:message>- <wsdl:portType name="UpdateHotlistsService">- <wsdl:operation name="getHotlistUpdatesRestrictSize" parameterOrder="signature userName sourceId hotlistName size">  <wsdl:input message="impl:getHotlistUpdatesRestrictSizeRequest" name="getHotlistUpdatesRestrictSizeRequest" />   <wsdl:output message="impl:getHotlistUpdatesRestrictSizeResponse" name="getHotlistUpdatesRestrictSizeResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="GetHotlistsUpdatesRestrictedSizeServiceSoapBinding" type="impl:UpdateHotlistsService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="getHotlistUpdatesRestrictSize">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="getHotlistUpdatesRestrictSizeRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:GetHotlistsUpdatesRestrictedSizeService" use="encoded" />   </wsdl:input>- <wsdl:output name="getHotlistUpdatesRestrictSizeResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/GetHotlistsUpdatesRestrictedSizeService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="UpdateHotlistsServiceService">- <wsdl:port binding="impl:GetHotlistsUpdatesRestrictedSizeServiceSoapBinding" name="GetHotlistsUpdatesRestrictedSizeService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/GetHotlistsUpdatesRestrictedSizeService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.10 PNCManualCheckWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://20.1.0.5:8081/bof2/services/PNCManualCheckWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://20.1.0.5:8081/bof2/services/PNCManualCheckWebService" xmlns:intf="http://20.1.0.5:8081/bof2/services/PNCManualCheckWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <!-- WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)  --> - <wsdl:message name="manualCheckRequest">  <wsdl:part name="signature" type="xsd:string" />   <wsdl:part name="username" type="xsd:string" />   <wsdl:part name="reasonCode" type="xsd:int" />   <wsdl:part name="vrm" type="xsd:string" />   <wsdl:part name="sourceId" type="xsd:short" />   </wsdl:message>- <wsdl:message name="manualCheckResponse">  <wsdl:part name="manualCheckReturn" type="xsd:anyType" />   </wsdl:message>- <wsdl:portType name="PNCWebService">- <wsdl:operation name="manualCheck" parameterOrder="signature username reasonCode vrm sourceId">  <wsdl:input message="impl:manualCheckRequest" name="manualCheckRequest" />   <wsdl:output message="impl:manualCheckResponse" name="manualCheckResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="PNCManualCheckWebServiceSoapBinding" type="impl:PNCWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="manualCheck">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="manualCheckRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://pnc.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="manualCheckResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://20.1.0.5:8081/bof2/services/PNCManualCheckWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="PNCWebServiceService">- <wsdl:port binding="impl:PNCManualCheckWebServiceSoapBinding" name="PNCManualCheckWebService">  <wsdlsoap:address location="http://20.1.0.5:8081/bof2/services/PNCManualCheckWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.11 CreateHotlistWebService <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_soapenc_string">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="soapenc:string[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="createOrUpdateHotlistRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="hotlistName" type="soapenc:string" />   <wsdl:part name="gpms" type="soapenc:string" />   <wsdl:part name="pncId" type="soapenc:int" />   <wsdl:part name="systemId" type="xsd:int" />   <wsdl:part name="remoteHotlistRef" type="soapenc:string" />   <wsdl:part name="sequenceNumber" type="soapenc:int" />   <wsdl:part name="hotlistEntries" type="impl:ArrayOf_soapenc_string" />   </wsdl:message>- <wsdl:message name="createOrUpdateHotlistResponse">  <wsdl:part name="createOrUpdateHotlistReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="HotlistWebService">- <wsdl:operation name="createOrUpdateHotlist" parameterOrder="signature hotlistName gpms pncId systemId remoteHotlistRef sequenceNumber hotlistEntries">  <wsdl:input message="impl:createOrUpdateHotlistRequest" name="createOrUpdateHotlistRequest" />   <wsdl:output message="impl:createOrUpdateHotlistResponse" name="createOrUpdateHotlistResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="CreateHotlistWebServiceSoapBinding" type="impl:HotlistWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="createOrUpdateHotlist">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="createOrUpdateHotlistRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://hotlist.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="createOrUpdateHotlistResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="HotlistWebServiceService">- <wsdl:port binding="impl:CreateHotlistWebServiceSoapBinding" name="CreateHotlistWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/CreateHotlistWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.12 DeleteHotlistWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/DeleteHotlistWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/DeleteHotlistWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/DeleteHotlistWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="deleteHotlistResponse">  <wsdl:part name="deleteHotlistReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="deleteHotlistRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="hotlistName" type="soapenc:string" />   <wsdl:part name="pncId" type="soapenc:int" />   <wsdl:part name="systemId" type="soapenc:int" />   <wsdl:part name="remoteHotlistRef" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="HotlistWebService">- <wsdl:operation name="deleteHotlist" parameterOrder="signature hotlistName pncId systemId remoteHotlistRef">  <wsdl:input message="impl:deleteHotlistRequest" name="deleteHotlistRequest" />   <wsdl:output message="impl:deleteHotlistResponse" name="deleteHotlistResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="DeleteHotlistWebServiceSoapBinding" type="impl:HotlistWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="deleteHotlist">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="deleteHotlistRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://hotlist.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="deleteHotlistResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/DeleteHotlistWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="HotlistWebServiceService">- <wsdl:port binding="impl:DeleteHotlistWebServiceSoapBinding" name="DeleteHotlistWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/DeleteHotlistWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.13 AlertWebService    <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/AlertWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/AlertWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/AlertWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="alertForCaptureResponse">  <wsdl:part name="alertForCaptureReturn" type="soapenc:string" />   </wsdl:message>- <wsdl:message name="alertForCaptureRequest">  <wsdl:part name="sourceUrn" type="soapenc:long" />   <wsdl:part name="pncId" type="soapenc:int" />   <wsdl:part name="capture" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="AlertWebService">- <wsdl:operation name="alertForCapture" parameterOrder="sourceUrn pncId capture">  <wsdl:input message="impl:alertForCaptureRequest" name="alertForCaptureRequest" />   <wsdl:output message="impl:alertForCaptureResponse" name="alertForCaptureResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="AlertWebServiceSoapBinding" type="impl:AlertWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="alertForCapture">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="alertForCaptureRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://input.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="alertForCaptureResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/AlertWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="AlertWebServiceService">- <wsdl:port binding="impl:AlertWebServiceSoapBinding" name="AlertWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/AlertWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.14 QuickCheckWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/QuickCheckWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/QuickCheckWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/QuickCheckWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <!-- WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)  --> - <wsdl:message name="quickCheckRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="pncId" type="soapenc:int" />   <wsdl:part name="vrm" type="soapenc:string" />   <wsdl:part name="startTime" type="soapenc:long" />   <wsdl:part name="endTime" type="soapenc:long" />   </wsdl:message>- <wsdl:message name="quickCheckResponse">  <wsdl:part name="quickCheckReturn" type="soapenc:boolean" />   </wsdl:message>- <wsdl:portType name="SearchWebService">- <wsdl:operation name="quickCheck" parameterOrder="signature pncId vrm startTime endTime">  <wsdl:input message="impl:quickCheckRequest" name="quickCheckRequest" />   <wsdl:output message="impl:quickCheckResponse" name="quickCheckResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="QuickCheckWebServiceSoapBinding" type="impl:SearchWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="quickCheck">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="quickCheckRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://search.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="quickCheckResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/QuickCheckWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="SearchWebServiceService">- <wsdl:port binding="impl:QuickCheckWebServiceSoapBinding" name="QuickCheckWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/QuickCheckWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>28.15 SearchWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/SearchWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/SearchWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/SearchWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:types>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/SearchWebService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_soapenc_string">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="soapenc:string[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="searchResponse">  <wsdl:part name="searchReturn" type="impl:ArrayOf_soapenc_string" />   </wsdl:message>- <wsdl:message name="searchRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="pncId" type="soapenc:int" />   <wsdl:part name="vrm" type="soapenc:string" />   <wsdl:part name="startTime" type="soapenc:long" />   <wsdl:part name="endTime" type="soapenc:long" />   <wsdl:part name="startRow" type="soapenc:int" />   </wsdl:message>- <wsdl:portType name="SearchWebService">- <wsdl:operation name="search" parameterOrder="signature pncId vrm startTime endTime startRow">  <wsdl:input message="impl:searchRequest" name="searchRequest" />   <wsdl:output message="impl:searchResponse" name="searchResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="SearchWebServiceSoapBinding" type="impl:SearchWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="search">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="searchRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://search.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="searchResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/SearchWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="SearchWebServiceService">- <wsdl:port binding="impl:SearchWebServiceSoapBinding" name="SearchWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/SearchWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.2 GetCaptureImageWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://10.102.30.143:8081/bof2/services/GetCaptureImageWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://10.102.30.143:8081/bof2/services/GetCaptureImageWebService" xmlns:intf="http://10.102.30.143:8081/bof2/services/GetCaptureImageWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <!-- WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)  --> - <wsdl:message name="getCaptureImageRequest">  <wsdl:part name="signature" type="xsd:string" />   <wsdl:part name="pncId" type="xsd:int" />   <wsdl:part name="vrm" type="xsd:string" />   <wsdl:part name="captureDate" type="xsd:long" />   <wsdl:part name="cameraUrn" type="xsd:long" />   <wsdl:part name="type" type="xsd:string" />   </wsdl:message>- <wsdl:message name="getCaptureImageResponse">  <wsdl:part name="getCaptureImageReturn" type="xsd:base64Binary" />   </wsdl:message>- <wsdl:portType name="SearchWebService">- <wsdl:operation name="getCaptureImage" parameterOrder="signature pncId vrm captureDate cameraUrn type">  <wsdl:input message="impl:getCaptureImageRequest" name="getCaptureImageRequest" />   <wsdl:output message="impl:getCaptureImageResponse" name="getCaptureImageResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="GetCaptureImageWebServiceSoapBinding" type="impl:SearchWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="getCaptureImage">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="getCaptureImageRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://search.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="getCaptureImageResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://10.102.30.143:8081/bof2/services/GetCaptureImageWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="SearchWebServiceService">- <wsdl:port binding="impl:GetCaptureImageWebServiceSoapBinding" name="GetCaptureImageWebService">  <wsdlsoap:address location="http://10.102.30.143:8081/bof2/services/GetCaptureImageWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.3 PNCStatusWebService    <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/PNCStatusWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/PNCStatusWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/PNCStatusWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="pingPNCResponse">  <wsdl:part name="pingPNCReturn" type="soapenc:boolean" />   </wsdl:message>- <wsdl:message name="pingPNCRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   </wsdl:message>- <wsdl:portType name="PNCWebService">- <wsdl:operation name="pingPNC" parameterOrder="signature username">  <wsdl:input message="impl:pingPNCRequest" name="pingPNCRequest" />   <wsdl:output message="impl:pingPNCResponse" name="pingPNCResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="PNCStatusWebServiceSoapBinding" type="impl:PNCWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="pingPNC">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="pingPNCRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://pnc.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="pingPNCResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/PNCStatusWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="PNCWebServiceService">- <wsdl:port binding="impl:PNCStatusWebServiceSoapBinding" name="PNCStatusWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/PNCStatusWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.4 PNCFastTrackResponsesWebService   <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <!-- WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)  --> - <wsdl:types>- <schema targetNamespace="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" xmlns="http://www.w3.org/2001/XMLSchema">  <import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> - <complexType name="ArrayOf_xsd_anyType">- <complexContent>- <restriction base="soapenc:Array">  <attribute ref="soapenc:arrayType" wsdl:arrayType="xsd:anyType[]" />   </restriction>  </complexContent>  </complexType>  </schema>  </wsdl:types>- <wsdl:message name="fastTrackResponsesRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="username" type="soapenc:string" />   <wsdl:part name="sourceIdentifier" type="soapenc:int" />   </wsdl:message>- <wsdl:message name="fastTrackResponsesResponse">  <wsdl:part name="fastTrackResponsesReturn" type="impl:ArrayOf_xsd_anyType" />   </wsdl:message>- <wsdl:portType name="PNCWebService">- <wsdl:operation name="fastTrackResponses" parameterOrder="signature username sourceIdentifier">  <wsdl:input message="impl:fastTrackResponsesRequest" name="fastTrackResponsesRequest" />   <wsdl:output message="impl:fastTrackResponsesResponse" name="fastTrackResponsesResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="PNCFastTrackResponsesWebServiceSoapBinding" type="impl:PNCWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="fastTrackResponses">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="fastTrackResponsesRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://pnc.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="fastTrackResponsesResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="PNCWebServiceService">- <wsdl:port binding="impl:PNCFastTrackResponsesWebServiceSoapBinding" name="PNCFastTrackResponsesWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/PNCFastTrackResponsesWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.5 PingWebService    <?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://127.0.0.1:8081/bof2/services/PingWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://127.0.0.1:8081/bof2/services/PingWebService" xmlns:intf="http://127.0.0.1:8081/bof2/services/PingWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <wsdl:message name="pingRequest">  <wsdl:part name="signature" type="soapenc:string" />   <wsdl:part name="sourcePncId" type="soapenc:int" />   </wsdl:message>- <wsdl:message name="pingResponse">  <wsdl:part name="pingReturn" type="soapenc:boolean" />   </wsdl:message>- <wsdl:portType name="AdminWebService">- <wsdl:operation name="ping" parameterOrder="signature sourcePncId">  <wsdl:input message="impl:pingRequest" name="pingRequest" />   <wsdl:output message="impl:pingResponse" name="pingResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="PingWebServiceSoapBinding" type="impl:AdminWebService">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="ping">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="pingRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://admin.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="pingResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://127.0.0.1:8081/bof2/services/PingWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="AdminWebServiceService">- <wsdl:port binding="impl:PingWebServiceSoapBinding" name="PingWebService">  <wsdlsoap:address location="http://127.0.0.1:8081/bof2/services/PingWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.6 MobileUsersWebService<?xml version="1.0" encoding="UTF-8" ?> - <wsdl:definitions targetNamespace="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" xmlns:intf="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">- <!-- WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)  -->   <wsdl:message name="updateMobilePasswordResponse" /> - <wsdl:message name="getMobileUsersListRequest">  <wsdl:part name="signature" type="xsd:string" />   <wsdl:part name="username" type="xsd:string" />   </wsdl:message>- <wsdl:message name="updateCaptureRequest">  <wsdl:part name="captureIdentifier" type="xsd:string" />   <wsdl:part name="text" type="xsd:string" />   <wsdl:part name="code" type="xsd:int" />   </wsdl:message>- <wsdl:message name="updateMobilePasswordRequest">  <wsdl:part name="signature" type="xsd:string" />   <wsdl:part name="username" type="xsd:string" />   <wsdl:part name="newPassword" type="xsd:string" />   </wsdl:message>- <wsdl:message name="getMobileUsersListResponse">  <wsdl:part name="getMobileUsersListReturn" type="xsd:string" />   </wsdl:message>  <wsdl:message name="updateCaptureResponse" /> - <wsdl:portType name="MobileUsersWebServiceImpl">- <wsdl:operation name="updateMobilePassword" parameterOrder="signature username newPassword">  <wsdl:input message="impl:updateMobilePasswordRequest" name="updateMobilePasswordRequest" />   <wsdl:output message="impl:updateMobilePasswordResponse" name="updateMobilePasswordResponse" />   </wsdl:operation>- <wsdl:operation name="updateCapture" parameterOrder="captureIdentifier text code">  <wsdl:input message="impl:updateCaptureRequest" name="updateCaptureRequest" />   <wsdl:output message="impl:updateCaptureResponse" name="updateCaptureResponse" />   </wsdl:operation>- <wsdl:operation name="getMobileUsersList" parameterOrder="signature username">  <wsdl:input message="impl:getMobileUsersListRequest" name="getMobileUsersListRequest" />   <wsdl:output message="impl:getMobileUsersListResponse" name="getMobileUsersListResponse" />   </wsdl:operation>  </wsdl:portType>- <wsdl:binding name="MobileUsersWebServiceSoapBinding" type="impl:MobileUsersWebServiceImpl">  <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" /> - <wsdl:operation name="updateMobilePassword">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="updateMobilePasswordRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://mobileuser.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="updateMobilePasswordResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>- <wsdl:operation name="updateCapture">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="updateCaptureRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://mobileuser.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="updateCaptureResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>- <wsdl:operation name="getMobileUsersList">  <wsdlsoap:operation soapAction="" /> - <wsdl:input name="getMobileUsersListRequest">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://mobileuser.webservices.bof2.anite.com" use="encoded" />   </wsdl:input>- <wsdl:output name="getMobileUsersListResponse">  <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" use="encoded" />   </wsdl:output>  </wsdl:operation>  </wsdl:binding>- <wsdl:service name="MobileUsersWebServiceImplService">- <wsdl:port binding="impl:MobileUsersWebServiceSoapBinding" name="MobileUsersWebService">  <wsdlsoap:address location="http://20.1.0.5:8081/bof2/services/MobileUsersWebService" />   </wsdl:port>  </wsdl:service>  </wsdl:definitions>26.7 UpdateFilesService<wsdl:definitions targetNamespace="http://localhost:8081/bof2/services/UpdateFilesService">    <wsdl:types>        <schema targetNamespace="http://api.fileops.component.bof2.anite.com">            <import namespace="http://localhost:8081/bof2/services/UpdateFilesService"/>            <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>            <complexType name="BofFileRevision">	            <sequence>                    <element name="externalSystemRevision" nillable="true" type="xsd:string"/>                    <element name="fileName" nillable="true" type="xsd:string"/>                    <element name="latestRevision" nillable="true" type="xsd:string"/>                </sequence>            </complexType>            <complexType name="BofFileDatablock">                <sequence>                    <element name="dataBlock" nillable="true" type="xsd:base64Binary"/>                    <element name="lastBlock" type="xsd:boolean"/>                    <element name="nrBytesRead" type="xsd:int"/>                </sequence>            </complexType>        </schema>        <schema targetNamespace="http://localhost:8081/bof2/services/UpdateFilesService">            <import namespace="http://api.fileops.component.bof2.anite.com"/>            <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>            <complexType name="ArrayOf_tns1_BofFileRevision">                <complexContent>        	        <restriction base="soapenc:Array">                        <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:BofFileRevision[]"/>                    </restriction>                </complexContent>            </complexType>	        <complexType name="ArrayOf_xsd_string">    	        <complexContent>        	        <restriction base="soapenc:Array">                        <attribute ref="soapenc:arrayType" wsdl:arrayType="xsd:string[]"/>                    </restriction>                </complexContent>            </complexType>        </schema>    </wsdl:types>    <wsdl:message name="getFileSHA1HashsumRequest">        <wsdl:part name="signature" type="xsd:string"/>        <wsdl:part name="username" type="xsd:string"/>        <wsdl:part name="fileName" type="xsd:string"/>        <wsdl:part name="version" type="xsd:long"/>    </wsdl:message>    <wsdl:message name="getFileSHA1HashsumResponse">        <wsdl:part name="getFileSHA1HashsumReturn" type="xsd:string"/>    </wsdl:message>    <wsdl:message name="getRepoStatusResponse">        <wsdl:part name="getRepoStatusReturn" type="xsd:long"/>    </wsdl:message>    <wsdl:message name="getFileStatusRequest">        <wsdl:part name="in0" type="xsd:string"/>        <wsdl:part name="in1" type="xsd:string"/>        <wsdl:part name="in2" type="xsd:string"/>    </wsdl:message>    <wsdl:message name="getRepoStatusRequest">        <wsdl:part name="in0" type="xsd:string"/>        <wsdl:part name="in1" type="xsd:string"/>        <wsdl:part name="in2" type="xsd:string"/>        <wsdl:part name="in3" type="xsd:long"/>    </wsdl:message>    <wsdl:message name="getFileStatusResponse">        <wsdl:part name="getFileStatusReturn" type="impl:ArrayOf_tns1_BofFileRevision"/>    </wsdl:message>    <wsdl:message name="getFileDatablockRequest">        <wsdl:part name="in0" type="xsd:string"/>        <wsdl:part name="in1" type="xsd:string"/>        <wsdl:part name="in2" type="xsd:string"/>        <wsdl:part name="in3" type="xsd:string"/>        <wsdl:part name="in4" type="xsd:long"/>        <wsdl:part name="in5" type="xsd:long"/>        <wsdl:part name="in6" type="xsd:int"/>    </wsdl:message>    <wsdl:message name="getFileStatusAsStringRequest">        <wsdl:part name="in0" type="xsd:string"/>        <wsdl:part name="in1" type="xsd:string"/>        <wsdl:part name="in2" type="xsd:string"/>    </wsdl:message>    <wsdl:message name="getFileDatablockResponse">        <wsdl:part name="getFileDatablockReturn" type="tns1:BofFileDatablock"/>    </wsdl:message>    <wsdl:message name="getFileStatusAsStringResponse">        <wsdl:part name="getFileStatusAsStringReturn" type="impl:ArrayOf_xsd_string"/>    </wsdl:message>    <wsdl:portType name="UpdateFilesServiceImpl">        <wsdl:operation name="getFileStatus" parameterOrder="in0 in1 in2">            <wsdl:input message="impl:getFileStatusRequest" name="getFileStatusRequest"/>            <wsdl:output message="impl:getFileStatusResponse" name="getFileStatusResponse"/>        </wsdl:operation>        <wsdl:operation name="getFileDatablock" parameterOrder="in0 in1 in2 in3 in4 in5 in6">            <wsdl:input message="impl:getFileDatablockRequest" name="getFileDatablockRequest"/>            <wsdl:output message="impl:getFileDatablockResponse" name="getFileDatablockResponse"/>        </wsdl:operation>        <wsdl:operation name="getRepoStatus" parameterOrder="in0 in1 in2 in3">            <wsdl:input message="impl:getRepoStatusRequest" name="getRepoStatusRequest"/>            <wsdl:output message="impl:getRepoStatusResponse" name="getRepoStatusResponse"/>        </wsdl:operation>        <wsdl:operation name="getFileSHA1Hashsum" parameterOrder="signature username fileName version">            <wsdl:input message="impl:getFileSHA1HashsumRequest" name="getFileSHA1HashsumRequest"/>            <wsdl:output message="impl:getFileSHA1HashsumResponse" name="getFileSHA1HashsumResponse"/>        </wsdl:operation>        <wsdl:operation name="getFileStatusAsString" parameterOrder="in0 in1 in2">            <wsdl:input message="impl:getFileStatusAsStringRequest" name="getFileStatusAsStringRequest"/>            <wsdl:output message="impl:getFileStatusAsStringResponse" name="getFileStatusAsStringResponse"/>        </wsdl:operation>    </wsdl:portType>    <wsdl:binding name="UpdateFilesServiceSoapBinding" type="impl:UpdateFilesServiceImpl">        <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>	        <wsdl:operation name="getFileStatus">                <wsdlsoap:operation soapAction=""/>	            <wsdl:input name="getFileStatusRequest">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://fileops.webservices.bof2.anite.com" use="encoded"/>                </wsdl:input>    	        <wsdl:output name="getFileStatusResponse">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost:8081/bof2/services/UpdateFilesService" use="encoded"/>                </wsdl:output>            </wsdl:operation>            <wsdl:operation name="getFileDatablock">                <wsdlsoap:operation soapAction=""/>                    <wsdl:input name="getFileDatablockRequest">                        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://fileops.webservices.bof2.anite.com" use="encoded"/>                    </wsdl:input>    	        <wsdl:output name="getFileDatablockResponse">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost:8081/bof2/services/UpdateFilesService" use="encoded"/>                </wsdl:output>            </wsdl:operation>            <wsdl:operation name="getRepoStatus">                <wsdlsoap:operation soapAction=""/>    	        <wsdl:input name="getRepoStatusRequest">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://fileops.webservices.bof2.anite.com" use="encoded"/>                </wsdl:input>	            <wsdl:output name="getRepoStatusResponse">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost:8081/bof2/services/UpdateFilesService" use="encoded"/>                </wsdl:output>            </wsdl:operation>            <wsdl:operation name="getFileSHA1Hashsum">                <wsdlsoap:operation soapAction=""/>                <wsdl:input name="getFileSHA1HashsumRequest">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://fileops.webservices.bof2.anite.com" use="encoded"/>                </wsdl:input>    	        <wsdl:output name="getFileSHA1HashsumResponse">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost:8081/bof2/services/UpdateFilesService" use="encoded"/>                </wsdl:output>            </wsdl:operation>	        <wsdl:operation name="getFileStatusAsString">                <wsdlsoap:operation soapAction=""/>    	        <wsdl:input name="getFileStatusAsStringRequest">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://fileops.webservices.bof2.anite.com" use="encoded"/>                </wsdl:input>    	        <wsdl:output name="getFileStatusAsStringResponse">                    <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost:8081/bof2/services/UpdateFilesService" use="encoded"/>                </wsdl:output>            </wsdl:operation>    </wsdl:binding>    <wsdl:service name="UpdateFilesServiceImplService">	    <wsdl:port binding="impl:UpdateFilesServiceSoapBinding" name="UpdateFilesService">            <wsdlsoap:address location="http://localhost:8081/bof2/services/UpdateFilesService"/>        </wsdl:port>    </wsdl:service></wsdl:definitions>26.8 RemotelyInstalledHotlistWebService	<?xml version="1.0" encoding="UTF-8"?><wsdl:definitions targetNamespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://remotelyloaded.hotlist.webservices.bof2.anite.com" xmlns:intf="http://remotelyloaded.hotlist.webservices.bof2.anite.com" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><!--WSDL created by Apache Axis version: 1.2Built on May 03, 2005 (02:20:24 EDT)--> <wsdl:types><schema targetNamespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" xmlns="http://www.w3.org/2001/XMLSchema">   <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>   <complexType name="ArrayOf_soapenc_string">    <complexContent>     <restriction base="soapenc:Array">      <attribute ref="soapenc:arrayType" wsdl:arrayType="soapenc:string[]"/>     </restriction>    </complexContent>   </complexType>  </schema> </wsdl:types>   <wsdl:message name="listAllHotlistsResponse">   </wsdl:message>   <wsdl:message name="getHotlistsToRemoveResponse">      <wsdl:part name="getHotlistsToRemoveReturn" type="impl:ArrayOf_soapenc_string"/>   </wsdl:message>   <wsdl:message name="getHotlistsToRemoveRequest">      <wsdl:part name="in0" type="soapenc:string"/>      <wsdl:part name="in1" type="soapenc:string"/>      <wsdl:part name="in2" type="xsd:int"/>   </wsdl:message>   <wsdl:message name="listAllHotlistsRequest">      <wsdl:part name="in0" type="soapenc:string"/>      <wsdl:part name="in1" type="soapenc:string"/>      <wsdl:part name="in2" type="xsd:int"/>      <wsdl:part name="in3" type="impl:ArrayOf_soapenc_string"/>   </wsdl:message>   <wsdl:portType name="RemotelyInstalledHotlistWebService">      <wsdl:operation name="listAllHotlists" parameterOrder="in0 in1 in2 in3">         <wsdl:input message="impl:listAllHotlistsRequest" name="listAllHotlistsRequest"/>         <wsdl:output message="impl:listAllHotlistsResponse" name="listAllHotlistsResponse"/>      </wsdl:operation>      <wsdl:operation name="getHotlistsToRemove" parameterOrder="in0 in1 in2">         <wsdl:input message="impl:getHotlistsToRemoveRequest" name="getHotlistsToRemoveRequest"/>         <wsdl:output message="impl:getHotlistsToRemoveResponse" name="getHotlistsToRemoveResponse"/>      </wsdl:operation>   </wsdl:portType>   <wsdl:binding name="RemotelyInstalledHotlistWebServiceSoapBinding"type="impl:RemotelyInstalledHotlistWebService">      <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>      <wsdl:operation name="listAllHotlists">         <wsdlsoap:operation soapAction=""/>         <wsdl:input name="listAllHotlistsRequest">            <wsdlsoap:body encodingStyle=http://schemas.xmlsoap.org/soap/encoding/namespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" use="encoded"/>         </wsdl:input>         <wsdl:output name="listAllHotlistsResponse">            <wsdlsoap:body encodingStyle=http://schemas.xmlsoap.org/soap/encoding/namespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" use="encoded"/>         </wsdl:output>      </wsdl:operation>      <wsdl:operation name="getHotlistsToRemove">         <wsdlsoap:operation soapAction=""/>         <wsdl:input name="getHotlistsToRemoveRequest">            <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" use="encoded"/>         </wsdl:input>         <wsdl:output name="getHotlistsToRemoveResponse">            <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://remotelyloaded.hotlist.webservices.bof2.anite.com" use="encoded"/>         </wsdl:output>      </wsdl:operation>   </wsdl:binding>   <wsdl:service name="RemotelyInstalledHotlistWebServiceService">      <wsdl:port binding="impl:RemotelyInstalledHotlistWebServiceSoapBinding"name="RemotelyInstalledHotlistWebService">         <wsdlsoap:address location="http://localhost:8081/bof2/services/RemotelyInstalledHotlistWebService"/>      </wsdl:port> </wsdl:service></wsdl:definitions>	
		BOF 2.3 Web Services GuideVersion 1.6NOT PROTECTIVELY MARKEDPage 25 of 143 BOF Admin Guide	Page 73 of 74Page 143 of 143